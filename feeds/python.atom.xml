<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>GeoPython - Python</title><link href="/" rel="alternate"></link><link href="/feeds/python.atom.xml" rel="self"></link><id>/</id><updated>2017-03-18T16:20:00+08:00</updated><entry><title>Temperary API Ref of GeoPython</title><link href="/temperary-api-ref-of-geopython.html" rel="alternate"></link><published>2017-03-18T16:20:00+08:00</published><updated>2017-03-18T16:20:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2017-03-18:/temperary-api-ref-of-geopython.html</id><summary type="html">&lt;h1&gt;API Ref of GeoPython&lt;/h1&gt;
&lt;p&gt;created on Sat Dec 17 22:28:24 2016
@author: cycleuser
Create Date: 2015-07-13
Modify Date: 2017-04-10
a tool set for daily geology related task.&lt;/p&gt;
&lt;h1&gt;prerequisite:&lt;/h1&gt;
&lt;p&gt;based on Python 3.x
   need math,numpy,pandas,matplotlib,xlrd,chempy&lt;/p&gt;
&lt;h1&gt;Simple Sample:&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;opern&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;
&lt;span class="mi"&gt;2 â€¦&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;API Ref of GeoPython&lt;/h1&gt;
&lt;p&gt;created on Sat Dec 17 22:28:24 2016
@author: cycleuser
Create Date: 2015-07-13
Modify Date: 2017-04-10
a tool set for daily geology related task.&lt;/p&gt;
&lt;h1&gt;prerequisite:&lt;/h1&gt;
&lt;p&gt;based on Python 3.x
   need math,numpy,pandas,matplotlib,xlrd,chempy&lt;/p&gt;
&lt;h1&gt;Simple Sample:&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;opern&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;geopython&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;gp&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;TasSample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tas.xlsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;TasSample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;geopython&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Geology related classes available:&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1) Tas
2) Ree
3) Trace &amp;amp; Trace2 (with different sequence of trace elements)
4) Qfl &amp;amp; Qmflt &amp;amp; Qapf
5) Polar (projection of wulf net &amp;amp; schmidt net)
6) Harker diagram
7) CIPW Norm calculation
8) Zircon Ce4/Ce3 calculation (Ballard 2002)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;know issues:&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1) Only work on Python 3.x
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Other&lt;/h1&gt;
&lt;p&gt;Any issues or improvements please open an issue at &lt;a href="https://github.com/chinageology/GeoPython/issues"&gt;here&lt;/a&gt;
or leave a message to &lt;a href="http://geopython.com"&gt;our website&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;DualTri&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a class of a double triangulars frame
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Label: the label at the tree corners of the triangular&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a list consist of three strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;LabelPosition: just the Position of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    LabelPosition: x-y style coords , three of them&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: description of the different region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list containing multiple strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the locations of those each one in the Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of triangular coord points&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the offset value used to adjust the appearance of each one in the Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of x-y coord offset values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;name: the file name used to read and use&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=['Q', 'A', 'P', 'F'], Label=qapf.xlsx)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Initialize self.  See help(type(self)) for accurate signature.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;h2&gt;Frame&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a Frame of TAS, REE, Trace Elements and other similar x-y plots
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Width,Height: the width and height of the generated figure&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Width,Height: two int numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dpi: dots per inch&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Dpi: an int number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Left,Right: the left and right limit of X axis&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Left,Right: two int numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Base,Top: the left and right limit of Y axis&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Base,Top: two int numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;X0,X1,X_Gap: the left and right limit of X label, and the numbers of gap between them&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X0,X1,X_Gap: three int numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Y0,Y1,Y_Gap: the left and right limit of Y label, and the numbers of gap between them&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Y0,Y1,Y_Gap: three int numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;FontSize: size of font of labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    FontSize: an int number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;xLabel, yLabel: the labels put alongside with x and y axises&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    xLabel, yLabel: two strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Width=Y Label, Height=X Label, Dpi=16, Left=7, Right=60, X_Gap=0, Base=9, Top=80, Y_Gap=0, FontSize=80, xLabel=6, yLabel=8)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Just set up all.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;Use the setup to set up figure feature.&lt;/p&gt;
&lt;h2&gt;Line&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a line class
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Begin: the Beginning point of the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Begin: a Point Instance&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;End: the End point of the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    End: a Point Instance&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Points: gathering all the Point Instances&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Points: a list&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;X,Y: the gathered x and y values of the line to use in plotting&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X,Y: two lists containing float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Width: the width of the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Width: an int number , mayby float is OK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color of the Line to draw on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Style: the style used for the Line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Style: a string; -, --,-., : maybe there would be some other types , from matplotlib&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency of the Point&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Label: label of the Line, telling what it is and distinguish it from other lines&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a string , if leave as "" or '' such kind of blank string, the label will not show on canvas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sort: the sequence used for sorting the points consisting the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Sort: a string, x means sort the points with their x values, y means use y instead of x, other means use the sequence of points as these points  are put to the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Points=, Sort=0.3, Width=-, Color=blue, Style=1, Alpha=, Label=[(0, 0), (1, 1)])&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setup the datas
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;order(self, TMP=[])&lt;/h3&gt;
&lt;h3&gt;sequence(self)&lt;/h3&gt;
&lt;p&gt;sort the points in the line with given option&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;draw the line on canvas with its setup&lt;/p&gt;
&lt;h2&gt;Point&lt;/h2&gt;
&lt;p&gt;a Point class&lt;/p&gt;
&lt;p&gt;X,Y: the values of its x-y coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X,Y: two float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Location: gather X and Y as a tuple for further use&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Location: just a tuple with two numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Size: the size of the Point to draw on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Size: a number , int or maybe float also OK , better around 1 to 20, not too large or too small&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color of the Point to draw on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency of the Point&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Marker: the marker used for the Point&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Marker: a string; o, d, *, ^ , maybe there would be some other types , from matplotlib&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Label: label of the Point, telling what it is and distinguish it from other points&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a string , if leave as "" or '' such kind of blank string, the label will not show on canvas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, X=, Y=o, Size=0.3, Color=red, Alpha=12, Marker=0, Label=0)&lt;/h3&gt;
&lt;p&gt;just set up the values&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;plot the Point to the canvas&lt;/p&gt;
&lt;h2&gt;Points&lt;/h2&gt;
&lt;p&gt;a class for multiple Points&lt;/p&gt;
&lt;p&gt;X,Y: the values of its x-y coords&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X,Y: two lists consist of float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Size: the size of the Points to draw on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Size: a number , int or maybe float also OK , better around 1 to 20, not too large or too small&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color of the Points to draw on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency of the Points&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Marker: the marker used for the Points&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Marker: a string; o, d, *, ^ , maybe there would be some other types , from matplotlib&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Label: label of the Points, telling what they are and distinguish them from other points&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a string , if leave as "" or '' such kind of blank string, the label will not show on canvas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, points=8, Size=, Color=o, Alpha=0.3, Marker=red, Label=12, FontSize=[(0, 0), (0, 1)])&lt;/h3&gt;
&lt;p&gt;just set up the values&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;plot the Point to the canvas&lt;/p&gt;
&lt;h2&gt;Polar&lt;/h2&gt;
&lt;p&gt;Polar Stereographic projection for structural data&lt;/p&gt;
&lt;p&gt;name: the file used to plot&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=['N', 'S', 'W', 'E'], Label=strike.xlsx)&lt;/h3&gt;
&lt;p&gt;Initialize self.  See help(type(self)) for accurate signature.&lt;/p&gt;
&lt;h3&gt;eqan(self, A)&lt;/h3&gt;
&lt;h3&gt;eqar(self, A)&lt;/h3&gt;
&lt;h3&gt;getangular(self, A, B, C)&lt;/h3&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;h3&gt;schmidt(self, Width=k, Color=1)&lt;/h3&gt;
&lt;p&gt;read the Excel, then draw the schmidt net and Plot points, job done~&lt;/p&gt;
&lt;h3&gt;wulf(self, Width=k, Color=1)&lt;/h3&gt;
&lt;p&gt;read the Excel, then draw the wulf net and Plot points, job done~&lt;/p&gt;
&lt;h2&gt;Qapf&lt;/h2&gt;
&lt;p&gt;inherit DualTri and Tool, read xlsx or csv file and make basic Qapf diagram&lt;/p&gt;
&lt;p&gt;Tags: the Tags on this diagram for description of different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tags: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: the labels of the different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the triangular coord location of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuples, these tuples contains the triangular coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the x-y offset of these labels on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of tuples containing x-y values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=10, Label=['Q', 'A', 'P', 'F'], FontSize=qapf.xlsx)&lt;/h3&gt;
&lt;p&gt;Initialize self.  See help(type(self)) for accurate signature.&lt;/p&gt;
&lt;h3&gt;draw(self)&lt;/h3&gt;
&lt;h3&gt;lowtri(self)&lt;/h3&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;h3&gt;uptri(self)&lt;/h3&gt;
&lt;h2&gt;QapfP&lt;/h2&gt;
&lt;p&gt;inherit Qapf, read xlsx or csv file and make Qapf diagram for Plutonic Rocks&lt;/p&gt;
&lt;p&gt;Tags: the Tags on this diagram for description of different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tags: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: the labels of the different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the triangular coord location of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuples, these tuples contains the triangular coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the x-y offset of these labels on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of tuples containing x-y values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=10, Label=['Q', 'A', 'P', 'F'], FontSize=qapf.xlsx)&lt;/h3&gt;
&lt;p&gt;Initialize self.  See help(type(self)) for accurate signature.&lt;/p&gt;
&lt;h3&gt;draw(self)&lt;/h3&gt;
&lt;h3&gt;lowtri(self)&lt;/h3&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;h3&gt;uptri(self)&lt;/h3&gt;
&lt;h2&gt;QapfV&lt;/h2&gt;
&lt;p&gt;inherit Qapf, read xlsx or csv file and make Qapf diagram for Volcanic rocks&lt;/p&gt;
&lt;p&gt;Tags: the Tags on this diagram for description of different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tags: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: the labels of the different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the triangular coord location of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuples, these tuples contains the triangular coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the x-y offset of these labels on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of tuples containing x-y values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=10, Label=['Q', 'A', 'P', 'F'], FontSize=qapf.xlsx)&lt;/h3&gt;
&lt;p&gt;Initialize self.  See help(type(self)) for accurate signature.&lt;/p&gt;
&lt;h3&gt;draw(self)&lt;/h3&gt;
&lt;h3&gt;lowtri(self)&lt;/h3&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;h3&gt;uptri(self)&lt;/h3&gt;
&lt;h2&gt;Qfl&lt;/h2&gt;
&lt;p&gt;inherit Tri and Tool, read xlsx or csv file and make QFL diagram&lt;/p&gt;
&lt;p&gt;Tags: the Tags on this diagram for description of different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tags: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: the labels of the different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the triangular coord location of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuples, these tuples contains the triangular coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the x-y offset of these labels on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of tuples containing x-y values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=['Q', 'F', 'L'], Label=qfl.xlsx)&lt;/h3&gt;
&lt;p&gt;set up the values&lt;/p&gt;
&lt;h3&gt;draw(self)&lt;/h3&gt;
&lt;p&gt;use the values to set up the general frame and lines, fill particular zone with given colors&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;just show the triangular frame on the canvas&lt;/p&gt;
&lt;h2&gt;Qmflt&lt;/h2&gt;
&lt;p&gt;inherit Qfl and Tool, read xlsx or csv file and make Qmflt diagram&lt;/p&gt;
&lt;p&gt;Tags: the Tags on this diagram for description of different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tags: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: the labels of the different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the triangular coord location of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuples, these tuples contains the triangular coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the x-y offset of these labels on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of tuples containing x-y values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=['Qm', 'F', 'Lt'], Label=qmflt.xlsx)&lt;/h3&gt;
&lt;p&gt;set up the values&lt;/p&gt;
&lt;h3&gt;draw(self)&lt;/h3&gt;
&lt;p&gt;use the values to set up the general frame and lines, fill particular zone with given colors&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;just show the triangular frame on the canvas&lt;/p&gt;
&lt;h2&gt;Ree&lt;/h2&gt;
&lt;p&gt;inherit Frame, read xlsx or csv file and use the Rare Earth Elements to plot the ree diagram&lt;/p&gt;
&lt;p&gt;Element: the elements used in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Element: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: a ref of Element&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;WholeData: gathering all data and find the min and max of the data file to set the limits of Y&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    WholeData: a list of float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;X0,X1: the left and right limits of X&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X0,X1: two int or float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;X_Gap: the space between the left and right limits of X&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X_Gap: an int number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;name: the file name to use in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=, Width=$REE-Standardlized-Pattern$, Height=16, Dpi=5, Left=3, Right=-1, X0=6, X1=-1, X_Gap=15, Base=15, Top=1, Y0=16, Y1=0, Y_Gap=80, FontSize=6, xLabel=8, yLabel=ree.xlsx)&lt;/h3&gt;
&lt;p&gt;Just set up all.&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;set the figure basic with the settings&lt;/p&gt;
&lt;h2&gt;Tag&lt;/h2&gt;
&lt;p&gt;a class for Tag put on canvas&lt;/p&gt;
&lt;p&gt;Label: label of the Tag, telling what it is and distinguish them from other tags&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a strings , if leave as "" or '' such kind of blank string, the label will not show on canvas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Location: the location of the Tag&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Location: a tuple consist of x-y values of its coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;X_offset,Y_offset: the values of its x-y offsets on coords&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X_offset,Y_offset: two float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;FontSize: the size of font of the Tag&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    FontSize: a number , int or maybe float also OK , better around 8 to 12, not too large or too small&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Label=12, Location=3, X_offset=-6, Y_offset=(0, 0), FontSize=Label)&lt;/h3&gt;
&lt;p&gt;set up the values&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;show the Tag on canvas with its offsets and font size, color and alpha are fixed for now&lt;/p&gt;
&lt;h2&gt;Tas&lt;/h2&gt;
&lt;p&gt;inherit Frame, read xlsx or csv file and use SiO2 , Na2O and K2O to plot tas diagram&lt;/p&gt;
&lt;p&gt;Lines: the lines consisting the Tas frame&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Lines: a list of lines&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tags: tags used for the items of Tas diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tagas: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: labels on the canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the locations of these labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuple containing two numbers as x-y coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;description: the description of the tas diagram&lt;/p&gt;
&lt;p&gt;name: the file name used for tas diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=$na_2O + K_2O wt\%$, Width=$SiO_2 wt\%$, Height=12, Dpi=15, Left=15, Right=1, X0=16, X1=0, X_Gap=11, Base=77, Top=37, Y0=79, Y1=35, Y_Gap=80, FontSize=6, xLabel=8, yLabel=tas.xlsx)&lt;/h3&gt;
&lt;p&gt;just set up the basic settings&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;show the tas frame and lines of tas on canvas&lt;/p&gt;
&lt;h2&gt;Tool&lt;/h2&gt;
&lt;p&gt;a tool set for basic tasks, crosspoint calc, coord transfer and fill region with color&lt;/p&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h2&gt;Trace&lt;/h2&gt;
&lt;p&gt;inherit Frame, read xlsx or csv file and use the Trace Elements to plot the trace diagram&lt;/p&gt;
&lt;p&gt;Element: the elements used in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Element: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: a ref of Element&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;name: the file name to use in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=, Width=$Trace-Elements-Standardlized-Pattern$, Height=16, Dpi=5, Left=3, Right=-1, X0=6, X1=-1, X_Gap=15, Base=37, Top=1, Y0=16, Y1=0, Y_Gap=80, FontSize=9, xLabel=16, yLabel=trace.xlsx)&lt;/h3&gt;
&lt;p&gt;Just set up all.&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;set the figure basic with the settings&lt;/p&gt;
&lt;h2&gt;Trace2&lt;/h2&gt;
&lt;p&gt;inherit Frame, read xlsx or csv file and use the Trace Elements to plot the trace2 diagram&lt;/p&gt;
&lt;p&gt;Element: the elements used in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Element: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: a ref of Element&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;name: the file name to use in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=, Width=$Trace-Elements-Standardlized-Pattern$, Height=16, Dpi=5, Left=3, Right=-1, X0=6, X1=-1, X_Gap=25, Base=26, Top=1, Y0=16, Y1=0, Y_Gap=80, FontSize=9, xLabel=16, yLabel=trace2.xlsx)&lt;/h3&gt;
&lt;p&gt;Just set up all.&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;set the figure basic with the settings&lt;/p&gt;
&lt;h2&gt;Tri&lt;/h2&gt;
&lt;p&gt;a class of triangular frame&lt;/p&gt;
&lt;p&gt;Label: the label at the tree corners of the triangular&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a list consist of three strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;LabelPosition: just the Position of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    LabelPosition: x-y style coords , three of them&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Label=['Q', 'F', 'L'])&lt;/h3&gt;
&lt;p&gt;set up the values&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;just show the triangular frame on the canvas&lt;/p&gt;
&lt;h2&gt;TriLine&lt;/h2&gt;
&lt;p&gt;inherit Line and Tool, line class for triangular coord&lt;/p&gt;
&lt;p&gt;x,y,z: the list for gathering the x,y,z values of points consisting the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: three lists&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Points=, Sort=0.3, Width=-, Color=blue, Style=1, Alpha=, Label=[(0, 0, 0), (1, 1, 1)])&lt;/h3&gt;
&lt;p&gt;setup the datas&lt;/p&gt;
&lt;h3&gt;order(self, TMP=[])&lt;/h3&gt;
&lt;h3&gt;sequence(self)&lt;/h3&gt;
&lt;p&gt;sort the points in the line with given option&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;draw the line on canvas with its setup&lt;/p&gt;
&lt;h3&gt;tritrans(self)&lt;/h3&gt;
&lt;h2&gt;TriPoint&lt;/h2&gt;
&lt;p&gt;inherit Point and Tool, a Point class for triangular coord&lt;/p&gt;
&lt;p&gt;x,y,z: the list for gathering the x,y,z values of points consisting the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: three lists&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;sum: a value used in calc of coord transfer&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    sum: just a number, both int or float are OK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, P=, Size=o, Color=0.3, Alpha=red, Marker=12, Label=(10, 20, 70))&lt;/h3&gt;
&lt;p&gt;just set up the values&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;plot the Point to the canvas&lt;/p&gt;
&lt;h2&gt;TriTag&lt;/h2&gt;
&lt;p&gt;inherit Tag and Tool,a Tag for triangular coord&lt;/p&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Label=12, Location=3, X_offset=-6, Y_offset=(0, 1, 2), FontSize=Label)&lt;/h3&gt;
&lt;p&gt;set up the values, transfer x,y,z coords to x-y coords&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;show the Tag on canvas with its offsets and font size, color and alpha are fixed for now&lt;/p&gt;</content></entry></feed>
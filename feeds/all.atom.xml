<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>GeoPyTool</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2018-02-27T00:00:00+08:00</updated><entry><title>Download</title><link href="/download.html" rel="alternate"></link><published>2018-02-27T00:00:00+08:00</published><updated>2018-02-27T00:00:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2018-02-27:/download.html</id><summary type="html">&lt;h1&gt;GeoPyTool Application Download Links&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h1&gt;GeoPyTool 打包的可执行程序下载链接&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;h1&gt;GeoPyTool pack for Windows:&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pan.baidu.com/s/1ht2wyZ6"&gt;Baidu Download 百度网盘&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://drive.google.com/open?id=1YEP6FsBzQ7Ig92zAM5B2MLah7cXq5Q9e"&gt;Google Drive&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;GeoPyTool app for macOS:&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pan.baidu.com/s/1mjkDt4O"&gt;Baidu Download 百度网盘&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://drive.google.com/open?id=13Uv8d9RYZsXdnR3nkTO5ykDuOyWVUkr8"&gt;Googel Drive&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;捐助支持&lt;/h1&gt;
&lt;p&gt;如果你希望支持 GeoPyTool 的开发，可以扫描下面的二维码进行捐助。
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/WeChatQrCode.png"&gt;&lt;/p&gt;</summary><content type="html">&lt;h1&gt;GeoPyTool Application Download Links&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h1&gt;GeoPyTool 打包的可执行程序下载链接&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;h1&gt;GeoPyTool pack for Windows:&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pan.baidu.com/s/1ht2wyZ6"&gt;Baidu Download 百度网盘&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://drive.google.com/open?id=1YEP6FsBzQ7Ig92zAM5B2MLah7cXq5Q9e"&gt;Google Drive&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;GeoPyTool app for macOS:&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pan.baidu.com/s/1mjkDt4O"&gt;Baidu Download 百度网盘&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://drive.google.com/open?id=13Uv8d9RYZsXdnR3nkTO5ykDuOyWVUkr8"&gt;Googel Drive&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;捐助支持&lt;/h1&gt;
&lt;p&gt;如果你希望支持 GeoPyTool 的开发，可以扫描下面的二维码进行捐助。
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/WeChatQrCode.png"&gt;&lt;/p&gt;</content><category term="Doc"></category><category term="English"></category><category term="Chinese"></category></entry><entry><title>About</title><link href="/about.html" rel="alternate"></link><published>2017-11-15T00:00:00+08:00</published><updated>2017-11-15T00:00:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2017-11-15:/about.html</id><summary type="html">&lt;h1&gt;Welcome to GeoPyTool&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;GeoPyTool is an application based on Python and designed as a solution for geology related daily work. &lt;strong&gt;It can run on alomost all mainstream operating systems&lt;/strong&gt;, such as Windows 7 SP1, Windows 8, Windows 10, macOS Sierra, macOS High Sierra, Ubuntu Linux, Debian Linux, Fedora Linux …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Welcome to GeoPyTool&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;GeoPyTool is an application based on Python and designed as a solution for geology related daily work. &lt;strong&gt;It can run on alomost all mainstream operating systems&lt;/strong&gt;, such as Windows 7 SP1, Windows 8, Windows 10, macOS Sierra, macOS High Sierra, Ubuntu Linux, Debian Linux, Fedora Linux, and alomost all other widely used desktop platforms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GeoPyTool doesn't rely on any other software&lt;/strong&gt;, such as MS Excel or CorelDraw, it can directly transport your data into the plot as vector graphic files and the calculation results into data sheets such as Xlsx or CSV files.&lt;/p&gt;
&lt;p&gt;It is a &lt;strong&gt;free software&lt;/strong&gt;: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt;
&lt;p&gt;GeoPyTool contains both traditional routines and newly developed methods。&lt;/p&gt;
&lt;h2&gt;简介&lt;/h2&gt;
&lt;p&gt;GeoPyTool 是一个基于 Python 实现的开源应用，针对的是地质学研究中的日常用途。由于使用了 Python，天生跨平台天赋加持，所以几乎能运行于所有主流操作系统，比如 Windows 7 SP1, Windows 8, Windows 10, macOS Sierra, macOS High Sierra, Ubuntu Linux, Debian Linux, Fedora Linux 等等几乎全部主流的桌面操作系统。&lt;/p&gt;
&lt;p&gt;GeoPyTool 不需依赖任何其他软件，不像 GeoKit 那样依赖特定版本的 32bit 的 Office，也不像 CGDK 那样需要依赖 CorelDRAW 的安装，单独有 GeoPyTool 一个，就可以实现从原始数据到出矢量图，以及导出各种计算的结果为 Xlsx 或者 CSV 这种表格文件。&lt;/p&gt;
&lt;p&gt;GeoPyTool 是一个自由软件:您可以根据自由软件基金会发布的GNU通用公共许可证的条款重新发布或者对其进行修改，但必须也基于同样的 GPLV3（GNU通用公共许可证第三版 ） ，或者更新版本的 GNU General Public License。&lt;/p&gt;
&lt;p&gt;GeoPyTool 包含了一些常用的传统方法，也实现了一些近年来新诞生的研究成果。&lt;/p&gt;
&lt;h1&gt;捐助支持&lt;/h1&gt;
&lt;p&gt;如果你希望支持 GeoPyTool 的开发，可以扫描下面的二维码进行捐助。
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/WeChatQrCode.png"&gt;&lt;/p&gt;</content><category term="Doc"></category><category term="English"></category><category term="Chinese"></category></entry><entry><title>安装指南</title><link href="/an-zhuang-zhi-nan.html" rel="alternate"></link><published>2017-11-15T00:00:00+08:00</published><updated>2017-11-15T00:00:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2017-11-15:/an-zhuang-zhi-nan.html</id><summary type="html">&lt;h2&gt;安装 GeoPyTool&lt;/h2&gt;
&lt;p&gt;GeoPyTool  有两种使用方法，可以作为独立的程序运行，也可以作为 Python 下的一个模块（module）来在 Python 解释器下调用。&lt;/p&gt;
&lt;h2&gt;作为独立程序使用 GeoPyTool&lt;/h2&gt;
&lt;p&gt;打包好的可执行文件，目前支持 Windows 和 macOS 两种平台。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/GeoPyTool/GeoPyTool/blob/master/Download.md"&gt;点击这里查看程序文件的下载链接。&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Mac 下的 APP&lt;/h3&gt;
&lt;p&gt;macOS 下面特别省心，因为开发者本身就用的这个系统。直接下载对应的压缩包，解压缩之后，双击 GeoPyTool.app 这个文件，就可以看到下面的图形界面了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="User Interface of the APP on macOS." src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/MacOSScreenShot.png"&gt;&lt;/p&gt;
&lt;h3&gt;Mac APP 更新升级方法&lt;/h3&gt;
&lt;p&gt;进入到 GeoPyTool.app 文件内部，位置为 &lt;code&gt;GeoPyTool.app/Contents/Resources/UpDateGeoPytool&lt;/code&gt;。双击这个个名为 &lt;code&gt;UpDateGeoPytool&lt;/code&gt;的文件 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;安装 GeoPyTool&lt;/h2&gt;
&lt;p&gt;GeoPyTool  有两种使用方法，可以作为独立的程序运行，也可以作为 Python 下的一个模块（module）来在 Python 解释器下调用。&lt;/p&gt;
&lt;h2&gt;作为独立程序使用 GeoPyTool&lt;/h2&gt;
&lt;p&gt;打包好的可执行文件，目前支持 Windows 和 macOS 两种平台。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/GeoPyTool/GeoPyTool/blob/master/Download.md"&gt;点击这里查看程序文件的下载链接。&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Mac 下的 APP&lt;/h3&gt;
&lt;p&gt;macOS 下面特别省心，因为开发者本身就用的这个系统。直接下载对应的压缩包，解压缩之后，双击 GeoPyTool.app 这个文件，就可以看到下面的图形界面了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="User Interface of the APP on macOS." src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/MacOSScreenShot.png"&gt;&lt;/p&gt;
&lt;h3&gt;Mac APP 更新升级方法&lt;/h3&gt;
&lt;p&gt;进入到 GeoPyTool.app 文件内部，位置为 &lt;code&gt;GeoPyTool.app/Contents/Resources/UpDateGeoPytool&lt;/code&gt;。双击这个个名为 &lt;code&gt;UpDateGeoPytool&lt;/code&gt;的文件，就会更新到最新版本了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Update the APP on macOS." src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/OSXUpdate.png"&gt;&lt;/p&gt;
&lt;h3&gt;Windows 系统下的打包文件&lt;/h3&gt;
&lt;h4&gt;Windows 8/8.1/10 用户&lt;/h4&gt;
&lt;p&gt;这几个比较新的 Windows 系统的用户也很省心，也是下载之后解压缩，然后在文件夹里面双击 &lt;strong&gt;Rungeopytool.bat&lt;/strong&gt; 就可以了。记住一定不要删除解压出来的文件夹里面的任何文件，那都是程序用得上的，一旦删除了就可能导致程序无法运行了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/RunWin.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="User Interface of the EXE on Windows." src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ScreenShot.png"&gt;&lt;/p&gt;
&lt;h4&gt;Windows 7 用户&lt;/h4&gt;
&lt;p&gt;刚才上面那张图实际上是在 Windows7 系统上面运行 GeoPyTool 的截图。不过 Windows7 系统用户需要先安装几个补丁，才能运行 geopytool。&lt;/p&gt;
&lt;p&gt;首先是一定要安装 Windows 7 SP1 这个补丁，然后要安装 KB2999226 和 &lt;code&gt;Visual C++ Redistributable 2015&lt;/code&gt;。如果不按照  SP1 以及其他两个补丁，运行 GeoPyTool.exe 的时候就会出现错误提示，说什么&lt;code&gt;api-ms-win-crt&lt;/code&gt; 无法定位之类的。总之遇到这样的情况时，先检查系统是不是安装了 SP1，然后将其他两个补丁安装试一试。&lt;/p&gt;
&lt;p&gt;针对 Windows 7 的 SP1 补丁&lt;a href="https://support.microsoft.com/en-us/help/15090/windows-7-install-service-pack-1-sp1"&gt;自然是可以在微软的官网这个地址里面找到的&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;其他两个安装包，包括 KB2999226 和&lt;code&gt;Visual C++ Redistributable 2015&lt;/code&gt; 已经包含在 GeoPyTool 的压缩包里面了，也可以在下面这两个地址里面下载：&lt;a href="https://pan.baidu.com/s/1kVwSQ95"&gt;32 bit Windows7 &lt;/a&gt;，&lt;a href="https://pan.baidu.com/s/1qY34ocW"&gt;64 bit WInodws7 &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;再次重复一遍，如果你遇到不能运行的情况，并且看到了 &lt;code&gt;api-ms-win-crt&lt;/code&gt; 这样的字样，先检查上面的补丁是否安装了。&lt;/p&gt;
&lt;h4&gt;Windows XP 和 Vista 用户&lt;/h4&gt;
&lt;p&gt;我自己试了好几次都没弄成，我也懒得在这些老古董系统上面浪费时间精力。人生宝贵，所以建议你把电脑升级成 Windows7 SP1 以上的更新的操作系统，如果配置实在太差也可以用 Linux 操作系统。反正如果你非要纠结在 XP 这类连微软自己都抛弃的系统上，那就祝你好运以及再见！&lt;/p&gt;
&lt;h3&gt;Windows EXE 更新方法&lt;/h3&gt;
&lt;p&gt;双击解压目录下的 &lt;strong&gt;Update.bat&lt;/strong&gt; 这个文件，就可以更新到最新版了。这个命令是调用 GeoPyTool 这个目录里面的 pip 来更新该目录下的 GeoPyTool 模块。千万别乱动这个文件同一目录下的任何其他内容，除非你很有信心能搞定哈，那样随你咯。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Update the EXE on Windows." src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/WinUpdate.png"&gt;&lt;/p&gt;
&lt;h1&gt;注意！如果你下载了打包的文件了，只要运行对应的脚本或者双击 APP 文件就可以了，下面的内容和你无关，无关！！！！！别再折腾去安装下面的内容了，弄不明白还浪费时间！！！！！！！注意阅读上文就可以了！！！！！&lt;/h1&gt;
&lt;h2&gt;将 GeoPyTool 作为 Python 模块来使用&lt;/h2&gt;
&lt;p&gt;其他的所有操作系统，比如 Debian Linux, Ubuntu Linux, Fedora Linux, FreeBSD 甚至 GNU/Hurd，都可以将 GeoPyTool 作为一个 Python 模块来在 Python 解释器里面运行。实际上对于 macOS 和 Windows 用户，也建议这样使用，因为这样能够最快速更新到最新版本，下载安装都更加迅速。当然，操作起来稍微复杂点，反正不适合缺乏挑战精神和探索学习能力的人。&lt;/p&gt;
&lt;h3&gt;首先要安装 Python&lt;/h3&gt;
&lt;p&gt;你需要先安装 Python，geopytool 是用 Python3.5 写的，并且不兼容 Python2， 所以推荐你也用 3.5 或者更新的 Python。可以到 &lt;a href="https://www.python.org/downloads/"&gt;Python 官方网站&lt;/a&gt; 或者  &lt;a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/"&gt;清华 Tuna&lt;/a&gt; 去下载对应自己系统的安装包。&lt;/p&gt;
&lt;p&gt;更推荐大家使用 Anaconda3-4.0.0 或者更新版本的 Anaconda3。因为在 Anaconda 中，包括 cython, numpy, pandas, matplotlib 等在内的很多必要的包都集成好了，安装时候省时间。&lt;/p&gt;
&lt;h5&gt;对于 Windows 用户的一些有用链接&lt;/h5&gt;
&lt;p&gt;实际上网上有很多很多指南，都给说明吧了要怎么安装 Python 以及激活 PIP。所以这里面就只放几个下载链接，自己探索吧哈，没探索精神搞个毛球学术对吧。&lt;/p&gt;
&lt;h6&gt;32bit：&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;下载地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Anaconda&lt;/td&gt;
&lt;td&gt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86.exe&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6&gt;64bit：&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;下载地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Anaconda&lt;/td&gt;
&lt;td&gt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86_64.exe&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;使用 PIP 安装 GeoPyTool&lt;/h3&gt;
&lt;p&gt;安装完了 Python 并且激活了 PIP 之后，你是不是想着马上就能安装 GeoPyTool 了？&lt;/p&gt;
&lt;p&gt;然而并不行。你需要安装一些基础包，geopytool 就是基于这些包构建的。即便你用的是 Anaconda3，也还是需要安装一些包，比如 pyqt5，这是用来搭建 GeoPyTool 的 GUI 图形界面的模块。&lt;/p&gt;
&lt;p&gt;所以要在终端里面输入一些命令来先安装这些基础包。&lt;/p&gt;
&lt;p&gt;不知道终端是啥？好吧，这里我先不责怪你怎么不去百度或者谷歌自行搜索。&lt;/p&gt;
&lt;p&gt;在 Windows 系统里面，现在的终端一般就是 CMD 或者 PowerShell。对于其他的操作系统，比如 macOS 或者各种 Linux 以及 BSD 操作系统，往往都是 Bash，在这些系统里面也往往能找到 终端 这个程序，一般就在开始菜单或者程序目录里面肯定有。&lt;/p&gt;
&lt;p&gt;Windows 用户不知道怎么运行 CMD 或者 PowerShell？搜索去吧，不要做纯粹的伸手党，自己探索一下是有好处的。&lt;/p&gt;
&lt;h4&gt;注意&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;这里我用的命令都是 pip，这是假设你的 系统默认的 pip 就是 python3 的。而如果你同时安装了 Python2 和 Python3，那可能 pip 对应的未必是 Python3 的 pip 而是 Python2 的，这时候你可能就要把下面所有的 pip 替换成 pip3 来运行，应该就可以了。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来就把下面的命令&lt;strong&gt;逐条&lt;/strong&gt;复制粘贴到终端里面来运行，安装依赖包吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install cython
pip install numpy
pip install pandas
pip install xlrd
pip install matplotlib
pip install BeautifulSoup4
pip install pyqt5
pip install scipy
pip install scikit-learn
pip install sympy
pip install requests
pip install pyopengl
pip install pyqtgraph
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接使用 pip 来安装 scikit-learn 可能会报错，需要安装 &lt;a href="http://landinghub.visualstudio.com/visual-cpp-build-tools"&gt;Microsoft Visual C++ Build Tools&lt;/a&gt;。所以还可以考虑用 conda 来安装 scipy 和 scikit-learn。这就需要先安装 conda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install requests
pip install pyopengl
pip install pyqtgraph
pip install conda
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后我们用 conda 来安装其他的包：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m conda install cython numpy pandas scipy scikit-learn sympy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装完成了上面这些依赖包之后，就可以输入下面的这个命令来安装 GeoPyTool 了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install geopytool
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果没有发现什么出错信息，就是说明安装成功了。&lt;/p&gt;
&lt;h3&gt;更新已经安装的 GeoPyTool 模块&lt;/h3&gt;
&lt;p&gt;如果你之前安装了 geopytool，可以通过下面的命令来更新到最新版本。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install geopytool --update --no-cache-dir
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;在 Python 下启动 GeoPyTool&lt;/h3&gt;
&lt;p&gt;安装完了 geopytool，就可以在 Python 解释器里面启动了。不过这里要推荐一个替代原生解释器的 IPython，可以通过下面命令安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install ipython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装好之后在终端中输入下面的命令启动 ipython。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在 ipython 或者原生 Python 解释器中输入下面两行命令，回车，就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;geopytool&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;gp&lt;/span&gt;
&lt;span class="n"&gt;gp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就能看到 GeoPyTool 的图形界面了。
例如下图就是在  Ubuntu 系统下的截图。&lt;/p&gt;
&lt;p&gt;&lt;img alt="GeoPyTool in Ubuntu" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/UbuntuScreenShot.png"&gt;&lt;/p&gt;
&lt;p&gt;每次运行 GeoPyTool 之前，更新一下是个好习惯。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --upgrade geopytool
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;点型Marker/ 颜色Color/ 线型Style&lt;/h2&gt;
&lt;p&gt;GeoPyTool 可视化的部分使用 Matplotlib 来实现的，所以设置的这些项目也是相似的。&lt;/p&gt;
&lt;p&gt;点型 Markers 的设置可以参考:
http://matplotlib.org/api/markers_api.html&lt;/p&gt;
&lt;p&gt;颜色 Colors 的设置可以参考:
http://matplotlib.org/api/colors_api.html&lt;/p&gt;
&lt;p&gt;下面的示意图来自&lt;a href="http://www.labri.fr/perso/nrougier/teaching/matplotlib/"&gt;nrougier&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/LIneStylesMarkers.png"&gt;&lt;/p&gt;
&lt;h2&gt;需要更多帮助？&lt;/h2&gt;
&lt;p&gt;请访问我们的论坛 https://github.com/GeoPyTool/GeoPyTool/issues 来留言&lt;strong&gt;写清楚&lt;/strong&gt;你使用的操作系统、安装方法、错误截图。我们会尽快给出反馈。&lt;/p&gt;
&lt;h2&gt;附录&lt;/h2&gt;
&lt;p&gt;锆石氧逸度计算的样例数据文件为 &lt;a href="https://github.com/GeoPyTool/GeoPyTool/blob/master/DataFileSamples/ZirconCe.xlsx"&gt;ZirconCe.xlsx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/NewZirconCe.png"&gt;&lt;/p&gt;
&lt;p&gt;TAS/REE/微量元素、Pearce  图解和 Harker 图解的数据样例文件为
&lt;a href="https://github.com/GeoPyTool/GeoPyTool/blob/master/DataFileSamples/Data.xlsx"&gt;Data.xlsx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/NewTAS.png"&gt;
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/NewTrace.png"&gt;&lt;/p&gt;
&lt;p&gt;极射赤平投影和玫瑰花图的样例数据文件为 &lt;a href="https://github.com/GeoPyTool/GeoPyTool/blob/master/DataFileSamples/Structure.xlsx"&gt;Structure.xlsx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/Rose.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/LoadPNG.png"&gt;&lt;/p&gt;
&lt;h1&gt;捐助支持&lt;/h1&gt;
&lt;p&gt;如果你希望支持 GeoPyTool 的开发，可以扫描下面的二维码进行捐助。
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/WeChatQrCode.png"&gt;&lt;/p&gt;</content><category term="Doc"></category><category term="Chinese"></category><category term="中文"></category><category term="文档"></category></entry><entry><title>Demonstration</title><link href="/demonstration.html" rel="alternate"></link><published>2017-11-15T00:00:00+08:00</published><updated>2017-11-15T00:00:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2017-11-15:/demonstration.html</id><summary type="html">&lt;h2&gt;Demonstration of the Functions&lt;/h2&gt;
&lt;h2&gt;Open and Import Data&lt;/h2&gt;
&lt;p&gt;To start a plot or calculation, raw data file should be imported to GeoPyTool first.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ImportData.png"&gt;&lt;/p&gt;
&lt;p&gt;The Data file can be Xlsx/Xls or CSV.
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ChooseAndImport.png"&gt;&lt;/p&gt;
&lt;h2&gt;Set Up Data&lt;/h2&gt;
&lt;p&gt;If there is no setting up information such as the Label/Color/Marker/Style/Alapha …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Demonstration of the Functions&lt;/h2&gt;
&lt;h2&gt;Open and Import Data&lt;/h2&gt;
&lt;p&gt;To start a plot or calculation, raw data file should be imported to GeoPyTool first.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ImportData.png"&gt;&lt;/p&gt;
&lt;p&gt;The Data file can be Xlsx/Xls or CSV.
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ChooseAndImport.png"&gt;&lt;/p&gt;
&lt;h2&gt;Set Up Data&lt;/h2&gt;
&lt;p&gt;If there is no setting up information such as the Label/Color/Marker/Style/Alapha/Width, you need to click on the Set Format button to add these items and make modification by yourself.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/SetDataUp.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/SettingDataUp.png"&gt;&lt;/p&gt;
&lt;h2&gt;Click the Function you need&lt;/h2&gt;
&lt;p&gt;After setting up, you can just click to use the function you need.
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ClickOnTheFunction.png"&gt;&lt;/p&gt;
&lt;h2&gt;TAS/REE/Trace Elements&lt;/h2&gt;
&lt;p&gt;These functions are quite commonly used and the details are shown as the picture below.
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/TAS-REE-Trace.png"&gt;&lt;/p&gt;
&lt;h2&gt;Pearce Diagram&lt;/h2&gt;
&lt;p&gt;Pearce Diagram just use some trace elements and is also quite easy to know how to use.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/Pearce.png"&gt;&lt;/p&gt;
&lt;h2&gt;Harker Diagram&lt;/h2&gt;
&lt;p&gt;Harker Diagram is a little bit complicated. Both the X and Y items used for the picture can be selectable by the slider.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/Harker.png"&gt;&lt;/p&gt;
&lt;h2&gt;QFL and QmFLt&lt;/h2&gt;
&lt;p&gt;These two diagrams are very easy. But you must find the right data file used for them to import.
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ImportQFL.png"&gt;&lt;/p&gt;
&lt;p&gt;Remind to set up data, then you can run these two functions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/QFLandQmFLt.png"&gt;&lt;/p&gt;
&lt;h2&gt;Stereographic Projection and Rose Map&lt;/h2&gt;
&lt;p&gt;Wulf or Schmidt Net can be chosen, and so is to use Lines or Points on the generated diagram.
In the Rose Map function, all data in one data files can be treated as a single group of data to draw Rose Map, and can also be treated as seperated teams to compare the Rose Map from each other. The step of the Rose Map can be set by slider. And so does the items chosen to use in the Rose Map. Dip/Dip-Angle/Strike are all available.&lt;/p&gt;
&lt;p&gt;Notice that the first Letters must be in UPPER case.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/StereoAndRose.png"&gt;&lt;/p&gt;
&lt;h2&gt;Zircon Ce4/3 Ratio Calculation&lt;/h2&gt;
&lt;p&gt;The data file used here is quite complicated. Please follow the guidance shown in the picture below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ZriconCeCalculation.png"&gt;&lt;/p&gt;
&lt;h2&gt;Zircon and Rutile Thermometer&lt;/h2&gt;
&lt;p&gt;These two function are super easy. Notice the ASiO2 and ATiO2 here are the Activity of these two components.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/Thermometer.png"&gt;&lt;/p&gt;
&lt;h2&gt;User Defined X-Y plot&lt;/h2&gt;
&lt;p&gt;This function allows users to load any picture from any articles as a base map to plot on.&lt;/p&gt;
&lt;p&gt;But you must understand the original plot first and know the mathematical setting of it. So you can set up the right format in your plot.&lt;/p&gt;
&lt;p&gt;For example, as the picture below shown,  the original diagram used Nb and Th, normalized by N-MORB(Sun and McDonough 1989), and then used the Log function of these two items. So we do the same setting up as shown by the picture. The Left/Right/Down/Up limit of the original diagram are 0.01/100/0.01/1000, so we need to use the Log function and find out that we should set the Left/Right/Down/Up limit to be -2/2/-2/3. If you can not understand why, please take a rest and good bye.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/UserDefinedXY.png"&gt;&lt;/p&gt;</content><category term="Doc"></category><category term="English"></category></entry><entry><title>Functions</title><link href="/functions.html" rel="alternate"></link><published>2017-11-15T00:00:00+08:00</published><updated>2017-11-15T00:00:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2017-11-15:/functions.html</id><summary type="html">&lt;h1&gt;Functions&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Brief description&lt;/th&gt;
&lt;th&gt;Reference&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TAS plot&lt;/td&gt;
&lt;td&gt;Volcanic or intrusive rocks classification with SiO2 and (Na2O+K2O)&lt;/td&gt;
&lt;td&gt;Maitre et al., 1989, Middlemost, 1994&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QAPF plot&lt;/td&gt;
&lt;td&gt;Plutonic or volcanic rocks classification with Q (quartz), A (alkali feldspar), P (plagioclase) and F (feldspathoid)&lt;/td&gt;
&lt;td&gt;Maitre et al., 2004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REE&lt;/td&gt;
&lt;td&gt;Compare Rare Earth Elements …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h1&gt;Functions&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Brief description&lt;/th&gt;
&lt;th&gt;Reference&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TAS plot&lt;/td&gt;
&lt;td&gt;Volcanic or intrusive rocks classification with SiO2 and (Na2O+K2O)&lt;/td&gt;
&lt;td&gt;Maitre et al., 1989, Middlemost, 1994&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QAPF plot&lt;/td&gt;
&lt;td&gt;Plutonic or volcanic rocks classification with Q (quartz), A (alkali feldspar), P (plagioclase) and F (feldspathoid)&lt;/td&gt;
&lt;td&gt;Maitre et al., 2004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REE&lt;/td&gt;
&lt;td&gt;Compare Rare Earth Elements with standard samples as Spider Diagram to analyze the distribution, tendency and anomalies&lt;/td&gt;
&lt;td&gt;Boynton, 1984&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trace elements&lt;/td&gt;
&lt;td&gt;Compare Trace Elements with standard samples as Spider Diagram to analyze the distribution, tendency and anomalies&lt;/td&gt;
&lt;td&gt;Sun and McDonough, 1989&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rb-Y+Nb, Rb-Yb+Ta, Nb-Y, and Ta-Yb plots&lt;/td&gt;
&lt;td&gt;Tectonic settings classification with Y-Nb, Yb-Ta, Rb- (Y + Nb) and Rb- (Yb + Ta) for granites&lt;/td&gt;
&lt;td&gt;Pearce et al., 1984&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stereographic projection and rose diagram&lt;/td&gt;
&lt;td&gt;Virtualization and basic analyzation of outcrop occurrence; distribution, tendency and anomalies as a rose diagram with stereographic projection on Wulf net and Schmidt net.&lt;/td&gt;
&lt;td&gt;Zhou et al., 2003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QFL and QmFLt plots&lt;/td&gt;
&lt;td&gt;“Triangular QFL and QmFLt compositional diagrams for plotting point counts of sandstones can be subdivided into fields that are characteristic of sandstone suites derived from the different kinds of provenance terranes controlled by plate tectonics.”&lt;/td&gt;
&lt;td&gt;Dickinson et al. 1983&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIPW normalization&lt;/td&gt;
&lt;td&gt;CIPW norm calculation with multiple samples&lt;/td&gt;
&lt;td&gt;Johannsen, 1939; Washington, 1917; CIPW norm Excel spreadsheet by Kurt Hollocher&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zircon Ce4/Ce3&lt;/td&gt;
&lt;td&gt;Calculate Ce(IV)/Ce(III) ratio in zircon to infer relative oxidation state in a wide range of intermediate to felsic igneous rocks.&lt;/td&gt;
&lt;td&gt;Ballard et al., 2002&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zircon and Rutile thermometers&lt;/td&gt;
&lt;td&gt;Use Ti element in Zircon and Zr element in Rutile to calculate the temperature of crystallization.&lt;/td&gt;
&lt;td&gt;Watson et al., 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cluster&lt;/td&gt;
&lt;td&gt;A basic version of hierarchical clustering analyzation of different number valued items.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Loading any picture as base map&lt;/td&gt;
&lt;td&gt;Both X-Y plot and triangular diagram is supported, that means users can use any picture form any articles as their base map to plot data on and generate their diagram even it has not been contained by any other softwares.&lt;/td&gt;
&lt;td&gt;An original function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fit and Contour map supported in X-Y plot&lt;/td&gt;
&lt;td&gt;Any picture can be imported as base map, and the data can be poly fitted and drawn with contour map.&lt;/td&gt;
&lt;td&gt;An original function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi Dimensional data Visualization and Statistics&lt;/td&gt;
&lt;td&gt;Data with more than three dimensions can be imported and statistical processed to be used on a 3-D Visualization.&lt;/td&gt;
&lt;td&gt;An original function&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="Doc"></category><category term="English"></category></entry><entry><title>功能列表</title><link href="/gong-neng-lie-biao.html" rel="alternate"></link><published>2017-11-15T00:00:00+08:00</published><updated>2017-11-15T00:00:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2017-11-15:/gong-neng-lie-biao.html</id><summary type="html">&lt;h1&gt;功能列表&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;th&gt;文献出处&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TAS plot&lt;/td&gt;
&lt;td&gt;使用 SiO2 和 (Na2O+K2O) 对火山岩或者侵入岩进行分类判别&lt;/td&gt;
&lt;td&gt;Maitre et al., 1989, Middlemost, 1994&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QAPF plot&lt;/td&gt;
&lt;td&gt;使用 Q (quartz 石英), A (alkali feldspar 碱性长石), P (plagioclase 斜长石) ，F (feldspathoid 似长石) 来对深成岩或者火山岩进行分类&lt;/td&gt;
&lt;td&gt;Maitre et al., 2004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REE（Rare Earth Elements）&lt;/td&gt;
&lt;td&gt;使用标准样品对样品的稀土元素进行标准化，分析其分配曲线、倾向、异常值等等&lt;/td&gt;
&lt;td&gt;Boynton, 1984&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trace …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h1&gt;功能列表&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;th&gt;文献出处&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TAS plot&lt;/td&gt;
&lt;td&gt;使用 SiO2 和 (Na2O+K2O) 对火山岩或者侵入岩进行分类判别&lt;/td&gt;
&lt;td&gt;Maitre et al., 1989, Middlemost, 1994&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QAPF plot&lt;/td&gt;
&lt;td&gt;使用 Q (quartz 石英), A (alkali feldspar 碱性长石), P (plagioclase 斜长石) ，F (feldspathoid 似长石) 来对深成岩或者火山岩进行分类&lt;/td&gt;
&lt;td&gt;Maitre et al., 2004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REE（Rare Earth Elements）&lt;/td&gt;
&lt;td&gt;使用标准样品对样品的稀土元素进行标准化，分析其分配曲线、倾向、异常值等等&lt;/td&gt;
&lt;td&gt;Boynton, 1984&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trace elements&lt;/td&gt;
&lt;td&gt;使用标准样品对样品的微量元素进行标准化，分析其分配曲线、倾向、异常值等等&lt;/td&gt;
&lt;td&gt;Sun and McDonough, 1989&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rb-Y+Nb, Rb-Yb+Ta, Nb-Y, and Ta-Yb plots&lt;/td&gt;
&lt;td&gt;利用花岗岩中的 Y-Nb, Yb-Ta, Rb- (Y + Nb)，Rb- (Yb + Ta) 来推断其大地构造位置&lt;/td&gt;
&lt;td&gt;Pearce et al., 1984&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;极射赤平投影和玫瑰花土&lt;/td&gt;
&lt;td&gt;使用吴尔福网或者施密特网来对地质体的产状，包括走向倾向倾角，进行可视化&lt;/td&gt;
&lt;td&gt;Zhou et al., 2003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QFL、QmFLt plots&lt;/td&gt;
&lt;td&gt;三角图解，使用砂岩中的石英碎屑、长石碎屑、岩屑等的比例关系来推断其大地构造单元&lt;/td&gt;
&lt;td&gt;Dickinson et al. 1983&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIPW 标准化计算&lt;/td&gt;
&lt;td&gt;经典计算方法，利用原始主微量数据中的特定氧化物和元素组合来推算标准化的矿物比例，计算的结果可以用于 QAPF 分类&lt;/td&gt;
&lt;td&gt;Johannsen, 1939; Washington, 1917; CIPW norm Excel spreadsheet by Kurt Hollocher&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;锆石中 Ce4/Ce3 比值计算&lt;/td&gt;
&lt;td&gt;计算锆石中的变价稀土元素 Ce(IV)/Ce(III) 的比值来作为斑岩氧逸度相对高低的半定量指标&lt;/td&gt;
&lt;td&gt;Ballard et al., 2002&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;锆石和金红石温度计&lt;/td&gt;
&lt;td&gt;使用锆石中 Ti 和金红石中的 Zr 两种元素以及 SiO2 和 TiO2 的活度来计算结晶体系的温度值。&lt;/td&gt;
&lt;td&gt;Watson et al., 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;谱系聚类分析&lt;/td&gt;
&lt;td&gt;对数据中的数值项目进行统计，根据相关系数等等来进行谱系聚类，初级阶段，后续会有进一步丰富和改进&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;加载任意图片做底图&lt;/td&gt;
&lt;td&gt;支持平面图和三角图解，可以使用任意文章中的任意图片来做底图使用，这样即便没有现成的软件提供具体的功能，用户也可以自行使用他人文献中的图片来投图使用作为参考。&lt;/td&gt;
&lt;td&gt;An original function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可拟合数据和绘制轮廓图的 X-Y 平面图&lt;/td&gt;
&lt;td&gt;可导入任意种类数据，可以使用任意文章中的任意图片来做底图使用，可设定是否标准化、是否取对数，数据多项式曲线拟合，轮廓图。&lt;/td&gt;
&lt;td&gt;An original function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高维度数据统计分析和三维可视化&lt;/td&gt;
&lt;td&gt;可导入任意种类数据，可设定是否标准化、是否取对数，可根据多维度变量的统计数据来筛选选择使用的数据指标种类组合。&lt;/td&gt;
&lt;td&gt;An original function&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;捐助支持&lt;/h1&gt;
&lt;p&gt;如果你希望支持 GeoPyTool 的开发，可以扫描下面的二维码进行捐助。
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/WeChatQrCode.png"&gt;&lt;/p&gt;</content><category term="Doc"></category><category term="Chinese"></category><category term="中文"></category><category term="文档"></category></entry><entry><title>Installation</title><link href="/installation.html" rel="alternate"></link><published>2017-11-15T00:00:00+08:00</published><updated>2017-11-15T00:00:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2017-11-15:/installation.html</id><summary type="html">&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;GeoPyTool can be used as a module inside Python, and can also run as a standalone application.&lt;/p&gt;
&lt;h2&gt;Standalone Application&lt;/h2&gt;
&lt;p&gt;Packed up executable files are temporarily only provided for Windows and MacOS platform.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/GeoPyTool/GeoPyTool/blob/master/Download.md"&gt;Click here to get Download links.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Mac APP&lt;/h3&gt;
&lt;p&gt;On macOS, everything is extremely easy to use GeoPyTool …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;GeoPyTool can be used as a module inside Python, and can also run as a standalone application.&lt;/p&gt;
&lt;h2&gt;Standalone Application&lt;/h2&gt;
&lt;p&gt;Packed up executable files are temporarily only provided for Windows and MacOS platform.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/GeoPyTool/GeoPyTool/blob/master/Download.md"&gt;Click here to get Download links.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Mac APP&lt;/h3&gt;
&lt;p&gt;On macOS, everything is extremely easy to use GeoPyTool. Just download and unzip the file, then double click on the GeoPyTool.app file, you will find the APP available as the following picture shows.&lt;/p&gt;
&lt;p&gt;&lt;img alt="User Interface of the APP on macOS." src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/MacOSScreenShot.png"&gt;&lt;/p&gt;
&lt;h3&gt;Mac APP Update&lt;/h3&gt;
&lt;p&gt;Go to the location inside the app file, &lt;code&gt;GeoPyTool.app/Contents/Resources/UpDateGeoPytool&lt;/code&gt;.Double click on this file neamed UpDateGeoPytool at &lt;code&gt;GeoPyTool.app/Contents/Resources/&lt;/code&gt;. It will update the GeoPyTool inside your GeoPyTool.app file. Remember that never modify any files directly under the same folder unless you are an expert on dealing with Python.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Update the APP on macOS." src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/OSXUpdate.png"&gt;&lt;/p&gt;
&lt;h3&gt;Windows Pack&lt;/h3&gt;
&lt;h4&gt;Windows 8/8.1/10 Users&lt;/h4&gt;
&lt;p&gt;On these modern Windows platforms, everything is also extremely easy to use GeoPyTool. Just download and unzip the file, then double click on the &lt;strong&gt;Rungeopytool.bat&lt;/strong&gt; file, and make sure that you don't delete any file form the unziped folder because they are all required by the program, then you will find the APP available as the following picture shows.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/RunWin.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="User Interface of the EXE on Windows." src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ScreenShot.png"&gt;&lt;/p&gt;
&lt;h4&gt;Windows 7 Users&lt;/h4&gt;
&lt;p&gt;Of corse, you must find that the screen shot above is actrually from a Windows 7  virtual machine.&lt;/p&gt;
&lt;p&gt;That's right, you can obviously use GeoPyTool on Windows 7, on which some system patches need to be installed. You need to install the SP1 of Windows and then install KB2999226 and the &lt;code&gt;Visual C++ Redistributable 2015&lt;/code&gt;. If you are using Windows 7 without the SP1 package installed, there might comes an&lt;code&gt;api-ms-win-crt&lt;/code&gt;related error. So believe me my friend, just install these patched below, they won't harm you after all.&lt;/p&gt;
&lt;p&gt;The SP1 package of Windows 7 can be found at &lt;a href="https://support.microsoft.com/en-us/help/15090/windows-7-install-service-pack-1-sp1"&gt;here, the official website of MicroSoft&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The installation packages of KB2999226 and the &lt;code&gt;Visual C++ Redistributable 2015&lt;/code&gt; are already contained in the Zip file of GeoPyTool for Windows, and can also be found here: &lt;a href="https://pan.baidu.com/s/1kVwSQ95"&gt;32 bit Windows7 &lt;/a&gt;，&lt;a href="https://pan.baidu.com/s/1qY34ocW"&gt;64 bit WInodws7 &lt;/a&gt;.
I am really a sweet guy, isn't it?
So if you encounter any &lt;code&gt;api-ms-win-crt&lt;/code&gt;related errors, please check those installations first.&lt;/p&gt;
&lt;h4&gt;Windows XP or Vista Users&lt;/h4&gt;
&lt;p&gt;I failed many times on both XP and Vista, and I think there might not be a lot users of these two antique systems.
If you are using one or both of them, please be good to yourself to update you old PC to at least Windows 7 SP1 or try Linux on your antique computers. My advice is that we should not waste our life on those systems that are not even supported by their developers and manufacturer. So, if you still want to run GeoPyTool on those two old systems, good luck and good bye.&lt;/p&gt;
&lt;h3&gt;Windows EXE Update&lt;/h3&gt;
&lt;p&gt;Double click on the  &lt;strong&gt;Update.bat&lt;/strong&gt; file to run update. It will update the GeoPyTool inside your GeoPyTool folder. Remember that never modify any files directly under the same folder unless you are an expert on dealing with Python.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Update the EXE on Windows." src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/WinUpdate.png"&gt;&lt;/p&gt;
&lt;h1&gt;Attention！ If you already download the packed up APP, just egnore the parts below and READ CAREFULLY PLEASE!!!!!!&lt;/h1&gt;
&lt;h2&gt;Use as a Python Module&lt;/h2&gt;
&lt;p&gt;Users of other Operating Systems, such as Debian Linux, Ubuntu Linux, Fedora Linux, FreeBSD or GNU/Hurd, please try to use GeoPyTool in Python, which is also recommended to all the users including those who use macOS or Windows 10, because the latest version of GeoPyTool can be installed with pip easilier and faster than using standalone executable files.&lt;/p&gt;
&lt;h3&gt;Install Python First&lt;/h3&gt;
&lt;p&gt;The first thing to do is to install Python, newer than 3.5, which can be download from &lt;a href="https://www.python.org/downloads/"&gt;Python Website&lt;/a&gt; or  &lt;a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/"&gt;Tsinghua Tuna&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anaconda3-4.0.0 and other newer versions of Anaconda3 are recommended. Because they already contain useful modules such as cython, numpy, pandas, matplotlib, and the powerful ipython.&lt;/p&gt;
&lt;h5&gt;Useful links for Windows users to install GeoPyTool with PIP:&lt;/h5&gt;
&lt;p&gt;In fact, you guys can easily find instructions on how to install Python and PIP on the Internet. So I will just cast some links for newbie using Python on Windows.&lt;/p&gt;
&lt;h6&gt;32bit：&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Address&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Anaconda&lt;/td&gt;
&lt;td&gt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86.exe&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6&gt;64bit：&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Address&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Anaconda&lt;/td&gt;
&lt;td&gt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.4.0-Windows-x86_64.exe&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Install GeoPyTool with PIP&lt;/h3&gt;
&lt;p&gt;After installation of Python, you might think that finally you can install GeoPyTool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NO!&lt;/strong&gt; In fact you need to install some used packages first, even you are using Anaconda. Because some packages used to build the Graphic User Interface of GeoPyTool still need to be installed, and this is also a good chance for you to update all the modules to the latest version (OR not).&lt;/p&gt;
&lt;p&gt;So use the following commands in your &lt;strong&gt;terminal&lt;/strong&gt; to install these modules.&lt;/p&gt;
&lt;p&gt;You don't know what a Terminal is? For Windows, it can be the mighty &lt;strong&gt;CMD&lt;/strong&gt; or PowerShell. For other systems including macOS, it should be the &lt;strong&gt;BASH&lt;/strong&gt; ore just labeled as &lt;strong&gt;Terminal&lt;/strong&gt; in the built-in applications list. Still don't know how to launch a terminal? Google it dude, we can't do that hand by hand for you.&lt;/p&gt;
&lt;h4&gt;Notice&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Here we use pip as we assume that your default version of Python is Python 3.X and the pip will refer to the PIP under Python3. If you installed both Python 2.X and Python 3.X, you might need to try to use **pip3** instead of **pip** in all the following commands to call the PIP of Python 3.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So paste the following commands in your &lt;strong&gt;terminal&lt;/strong&gt; as their sequence to install these modules in order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install cython
pip install numpy
pip install pandas
pip install xlrd
pip install matplotlib
pip install BeautifulSoup4
pip install pyqt5
pip install scipy
pip install scikit-learn
pip install sympy
pip install requests
pip install pyopengl
pip install pyqtgraph
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The installation of scikit-learn might require &lt;a href="http://landinghub.visualstudio.com/visual-cpp-build-tools"&gt;Microsoft Visual C++ Build Tools&lt;/a&gt;, another solution is to use conda to install scipy and scikit-learn.&lt;/p&gt;
&lt;p&gt;We install conda with pip first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install requests
pip install pyopengl
pip install pyqtgraph
pip install conda
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we use conda to install some other packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m conda install cython numpy pandas scipy scikit-learn sympy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the installation of those packages above, you can use this similar command also in the &lt;strong&gt;terminal&lt;/strong&gt; to install the GeoPyTool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install geopytool
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If there comes no error message, everything should have been done successfully.&lt;/p&gt;
&lt;h3&gt;Update an existing GeoPyTool&lt;/h3&gt;
&lt;p&gt;If you installed GeoPyTool as a module in Python, you can use this similar command also in the &lt;strong&gt;terminal&lt;/strong&gt; to update to the latest version of GeoPyTool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install geopytool --update --no-cache-dir
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Launch GeoPyTool form a Python interpreter&lt;/h3&gt;
&lt;p&gt;After the installation step above, GeoPyTool now becomes available in Python interpreter. The &lt;strong&gt;IPython&lt;/strong&gt; interpreter is recommended because it is much friendly than the buildin interpreter of Python. &lt;strong&gt;IPython&lt;/strong&gt; can be also installed with pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install ipython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you can run ipython in &lt;strong&gt;terminal&lt;/strong&gt; with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you can simply use &lt;strong&gt;GeoPyTool&lt;/strong&gt; by type the following commands in your Python interpreter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;geopytool&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;gp&lt;/span&gt;
&lt;span class="n"&gt;gp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You would see the GUI of &lt;strong&gt;GeoPyTool&lt;/strong&gt;, which is under development for now. So it is a good idea to update &lt;strong&gt;GeoPyTool&lt;/strong&gt; with pip everytime before you use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --upgrade geopytool
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Marker/Color/Style&lt;/h2&gt;
&lt;p&gt;All these details in GeoPyTool are the same as those in Matplotlib becasue that is what GeoPyTool used to visualize data.&lt;/p&gt;
&lt;p&gt;Markers of Points can be reffered from here:
http://matplotlib.org/api/markers_api.html&lt;/p&gt;
&lt;p&gt;Colors can be reffered from here:
http://matplotlib.org/api/colors_api.html&lt;/p&gt;
&lt;p&gt;Here is a picture of Line Styles and Point Markers form &lt;a href="http://www.labri.fr/perso/nrougier/teaching/matplotlib/"&gt;nrougier&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/LIneStylesMarkers.png"&gt;&lt;/p&gt;
&lt;h2&gt;Need Further Help?&lt;/h2&gt;
&lt;p&gt;Visit our BBS https://github.com/GeoPyTool/GeoPyTool/issues and write a post to describe your problems in detail. We will response as soon as we can.&lt;/p&gt;
&lt;h2&gt;Appendix&lt;/h2&gt;
&lt;p&gt;The New Zircon Ce function need Data template file named as &lt;a href="https://github.com/GeoPyTool/GeoPyTool/blob/master/DataFileSamples/ZirconCe.xlsx"&gt;ZirconCe.xlsx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/NewZirconCe.png"&gt;&lt;/p&gt;
&lt;p&gt;The New  TAS, REE and Trace Elements functions share a same Data template files:
&lt;a href="https://github.com/GeoPyTool/GeoPyTool/blob/master/DataFileSamples/Data.xlsx"&gt;Data.xlsx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/NewTAS.png"&gt;
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/NewTrace.png"&gt;&lt;/p&gt;
&lt;p&gt;The New StereoNet Projection and the RoseMap function need Data template file named as &lt;a href="https://github.com/GeoPyTool/GeoPyTool/blob/master/DataFileSamples/Structure.xlsx"&gt;Structure.xlsx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/Rose.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/LoadPNG.png"&gt;&lt;/p&gt;</content><category term="Doc"></category><category term="English"></category><category term="Chinese"></category></entry><entry><title>开发记录</title><link href="/kai-fa-ji-lu.html" rel="alternate"></link><published>2017-11-15T00:00:00+08:00</published><updated>2017-11-15T00:00:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2017-11-15:/kai-fa-ji-lu.html</id><summary type="html">&lt;h1&gt;开发记录&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标志性事件&lt;/th&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;新功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;开源启动&lt;/td&gt;
&lt;td&gt;2016-07-07 6:20&lt;/td&gt;
&lt;td&gt;TAS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;新增 QAPF&lt;/td&gt;
&lt;td&gt;2016-07-09 08:32&lt;/td&gt;
&lt;td&gt;QAPF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;新增  Wulff&lt;/td&gt;
&lt;td&gt;2016-12-18 08:32&lt;/td&gt;
&lt;td&gt;Wulf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;功能重构&lt;/td&gt;
&lt;td&gt;2017-03-15 15:30&lt;/td&gt;
&lt;td&gt;Pearce、  Harker 图解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;单颗粒锆石的 Ce4/3 比值计算&lt;/td&gt;
&lt;td&gt;2017-03-25 15:30&lt;/td&gt;
&lt;td&gt;Ballard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多颗粒锆石 Ce4/3 比值计算&lt;/td&gt;
&lt;td&gt;2017-03-28 15:30&lt;/td&gt;
&lt;td&gt;MultiBallard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多样本的 CIPW 标准矿物计算&lt;/td&gt;
&lt;td&gt;2017-04-3 12:30 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h1&gt;开发记录&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标志性事件&lt;/th&gt;
&lt;th&gt;日期&lt;/th&gt;
&lt;th&gt;新功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;开源启动&lt;/td&gt;
&lt;td&gt;2016-07-07 6:20&lt;/td&gt;
&lt;td&gt;TAS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;新增 QAPF&lt;/td&gt;
&lt;td&gt;2016-07-09 08:32&lt;/td&gt;
&lt;td&gt;QAPF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;新增  Wulff&lt;/td&gt;
&lt;td&gt;2016-12-18 08:32&lt;/td&gt;
&lt;td&gt;Wulf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;功能重构&lt;/td&gt;
&lt;td&gt;2017-03-15 15:30&lt;/td&gt;
&lt;td&gt;Pearce、  Harker 图解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;单颗粒锆石的 Ce4/3 比值计算&lt;/td&gt;
&lt;td&gt;2017-03-25 15:30&lt;/td&gt;
&lt;td&gt;Ballard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多颗粒锆石 Ce4/3 比值计算&lt;/td&gt;
&lt;td&gt;2017-03-28 15:30&lt;/td&gt;
&lt;td&gt;MultiBallard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多样本的 CIPW 标准矿物计算&lt;/td&gt;
&lt;td&gt;2017-04-3 12:30&lt;/td&gt;
&lt;td&gt;MultiCIPW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;全新重构图形界面&lt;/td&gt;
&lt;td&gt;2017-07-23 12:30&lt;/td&gt;
&lt;td&gt;使用了 PyQt5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;全部核心功能重构&lt;/td&gt;
&lt;td&gt;2017-08-31 23:30&lt;/td&gt;
&lt;td&gt;全新多可自定项的 Harker 图解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;锆石金红石温度计&lt;/td&gt;
&lt;td&gt;2017-10-17 20:48:21&lt;/td&gt;
&lt;td&gt;Zircon/Rutile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;加载 PNG/JPG/SVG 做底图&lt;/td&gt;
&lt;td&gt;2017-10-23  17:38:21&lt;/td&gt;
&lt;td&gt;任意图片都可以做底图来投图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中英双语切换&lt;/td&gt;
&lt;td&gt;2017-10-25 21:00:20&lt;/td&gt;
&lt;td&gt;语言文件模块化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;更多语言支持&lt;/td&gt;
&lt;td&gt;2017-10-30 23:00:20&lt;/td&gt;
&lt;td&gt;用户可以自行翻译界面文字并且加载，可以使用任意一种语言&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;捐助支持&lt;/h1&gt;
&lt;p&gt;如果你希望支持 GeoPyTool 的开发，可以扫描下面的二维码进行捐助。
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/WeChatQrCode.png"&gt;&lt;/p&gt;</content><category term="Doc"></category><category term="Chinese"></category><category term="中文"></category><category term="文档"></category></entry><entry><title>Milestones</title><link href="/milestones.html" rel="alternate"></link><published>2017-11-15T00:00:00+08:00</published><updated>2017-11-15T00:00:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2017-11-15:/milestones.html</id><summary type="html">&lt;h1&gt;Milestones&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;MileStone&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginning Date&lt;/td&gt;
&lt;td&gt;2016-07-07 6:20&lt;/td&gt;
&lt;td&gt;TAS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adding QAPF&lt;/td&gt;
&lt;td&gt;2016-07-09 08:32&lt;/td&gt;
&lt;td&gt;QAPF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adding Wulff&lt;/td&gt;
&lt;td&gt;2016-12-18 08:32&lt;/td&gt;
&lt;td&gt;Wulf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reconsitution&lt;/td&gt;
&lt;td&gt;2017-03-15 15:30&lt;/td&gt;
&lt;td&gt;Pearce and  Harker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single Zircon Ce&lt;/td&gt;
&lt;td&gt;2017-03-25 15:30&lt;/td&gt;
&lt;td&gt;Ballard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple Zircon Ce&lt;/td&gt;
&lt;td&gt;2017-03-28 15:30&lt;/td&gt;
&lt;td&gt;MultiBallard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple Samples CIPW Norm&lt;/td&gt;
&lt;td&gt;2017-04-3 12:30 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h1&gt;Milestones&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;MileStone&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Beginning Date&lt;/td&gt;
&lt;td&gt;2016-07-07 6:20&lt;/td&gt;
&lt;td&gt;TAS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adding QAPF&lt;/td&gt;
&lt;td&gt;2016-07-09 08:32&lt;/td&gt;
&lt;td&gt;QAPF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adding Wulff&lt;/td&gt;
&lt;td&gt;2016-12-18 08:32&lt;/td&gt;
&lt;td&gt;Wulf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reconsitution&lt;/td&gt;
&lt;td&gt;2017-03-15 15:30&lt;/td&gt;
&lt;td&gt;Pearce and  Harker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single Zircon Ce&lt;/td&gt;
&lt;td&gt;2017-03-25 15:30&lt;/td&gt;
&lt;td&gt;Ballard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple Zircon Ce&lt;/td&gt;
&lt;td&gt;2017-03-28 15:30&lt;/td&gt;
&lt;td&gt;MultiBallard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple Samples CIPW Norm&lt;/td&gt;
&lt;td&gt;2017-04-3 12:30&lt;/td&gt;
&lt;td&gt;MultiCIPW&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NewGUI&lt;/td&gt;
&lt;td&gt;2017-07-23 12:30&lt;/td&gt;
&lt;td&gt;GUI Powered By PyQt5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;All Rebuild&lt;/td&gt;
&lt;td&gt;2017-08-31 23:30&lt;/td&gt;
&lt;td&gt;Harker Back&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Temp Calc&lt;/td&gt;
&lt;td&gt;2017-10-17 20:48:21&lt;/td&gt;
&lt;td&gt;Zircon/Rutile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Load PNG/JPG/SVG&lt;/td&gt;
&lt;td&gt;2017-10-23  17:38:21&lt;/td&gt;
&lt;td&gt;Load Base Maps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chinese/English Switch&lt;/td&gt;
&lt;td&gt;2017-10-25 21:00:20&lt;/td&gt;
&lt;td&gt;Language&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;More Languages&lt;/td&gt;
&lt;td&gt;2017-10-30 23:00:20&lt;/td&gt;
&lt;td&gt;User can choose own Language file&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="Doc"></category><category term="English"></category></entry><entry><title>演示视频</title><link href="/yan-shi-shi-pin.html" rel="alternate"></link><published>2017-11-15T00:00:00+08:00</published><updated>2017-11-15T00:00:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2017-11-15:/yan-shi-shi-pin.html</id><summary type="html">&lt;h2&gt;演示视频&lt;/h2&gt;
&lt;p&gt;点击下列链接直接观看&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/av13983803/"&gt;基本操作演示&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/av15926064/"&gt;使用讲解视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/av15926936/"&gt;数据导入和格式化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/av15926454/"&gt;胡乱感慨一下&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;截图演示&lt;/h2&gt;
&lt;p&gt;由于精力有限，我只录制了中文的演示视频。
然后下面的截图呢，就只有英文文字标注了。大家有各种问题交流，除了在&lt;a href="https://zhuanlan.zhihu.com/p/30651165?group_id=910460052293672960"&gt;知乎这里&lt;/a&gt;留言外，还可以去注册一下&lt;a href="https://github.com/GeoPyTool/GeoPyTool/issues"&gt;咱们的论坛&lt;/a&gt;，或者加入咱们的QQ群： 560675626 （为避免无关人员骚扰，加群申请填写暗号 大胖是个好家伙 来通过验证）。&lt;/p&gt;
&lt;h2&gt;打开和导入数据文件&lt;/h2&gt;
&lt;p&gt;投图计算之前，必然要先打开文件导入数据，操作如截图所示。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ImportData.png"&gt;&lt;/p&gt;
&lt;p&gt;数据格式可以使 Xlsx/Xls 或者 CSV。
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ChooseAndImport.png"&gt;&lt;/p&gt;
&lt;h2&gt;设置数据添加分组颜色等信息&lt;/h2&gt;
&lt;p&gt;如果原始数据没有添加这些分类信息，程序自然不知道该怎么分。所以你需要自己添加 Label/Color/Marker/Style/Alapha/Width等项目。好在这些只需要点击一下 设置数据（英文版为 Set Fromat
) 按钮，就可以添加好这些项目了，然后你还需要根据自己的样品情况自己去分组 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;演示视频&lt;/h2&gt;
&lt;p&gt;点击下列链接直接观看&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/av13983803/"&gt;基本操作演示&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/av15926064/"&gt;使用讲解视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/av15926936/"&gt;数据导入和格式化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bilibili.com/video/av15926454/"&gt;胡乱感慨一下&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;截图演示&lt;/h2&gt;
&lt;p&gt;由于精力有限，我只录制了中文的演示视频。
然后下面的截图呢，就只有英文文字标注了。大家有各种问题交流，除了在&lt;a href="https://zhuanlan.zhihu.com/p/30651165?group_id=910460052293672960"&gt;知乎这里&lt;/a&gt;留言外，还可以去注册一下&lt;a href="https://github.com/GeoPyTool/GeoPyTool/issues"&gt;咱们的论坛&lt;/a&gt;，或者加入咱们的QQ群： 560675626 （为避免无关人员骚扰，加群申请填写暗号 大胖是个好家伙 来通过验证）。&lt;/p&gt;
&lt;h2&gt;打开和导入数据文件&lt;/h2&gt;
&lt;p&gt;投图计算之前，必然要先打开文件导入数据，操作如截图所示。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ImportData.png"&gt;&lt;/p&gt;
&lt;p&gt;数据格式可以使 Xlsx/Xls 或者 CSV。
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ChooseAndImport.png"&gt;&lt;/p&gt;
&lt;h2&gt;设置数据添加分组颜色等信息&lt;/h2&gt;
&lt;p&gt;如果原始数据没有添加这些分类信息，程序自然不知道该怎么分。所以你需要自己添加 Label/Color/Marker/Style/Alapha/Width等项目。好在这些只需要点击一下 设置数据（英文版为 Set Fromat
) 按钮，就可以添加好这些项目了，然后你还需要根据自己的样品情况自己去分组。可别来问该怎么分组，你自己的样品自己做主！&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/SetDataUp.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/SettingDataUp.png"&gt;&lt;/p&gt;
&lt;h2&gt;点击要用的功能来运行&lt;/h2&gt;
&lt;p&gt;设置完了格式之后，就可以点击你要用的功能来运行了。
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ClickOnTheFunction.png"&gt;&lt;/p&gt;
&lt;h2&gt;TAS硅碱图解/REE稀土模式图/微量元素蛛网图&lt;/h2&gt;
&lt;p&gt;These functions are quite commonly used and the details are shown as the picture below.&lt;/p&gt;
&lt;p&gt;这些功能都很简单，没啥可说的，如下图所示。另外微量元素有两种排列方式，一种是 Cs-Lu，另外一个是 Rb-Lu，反正有个选框，可以用来切换，自己找找吧，就在 Reset 那个按钮旁边哈。
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/TAS-REE-Trace.png"&gt;&lt;/p&gt;
&lt;h2&gt;Pearce 图解&lt;/h2&gt;
&lt;p&gt;无非是用了几种不同元素组合而已。右下角的滑块通过滑动可以获得这几种不同组合，当然都是点击 save 来存储生成的图像了。太简单了，没啥可说的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/Pearce.png"&gt;&lt;/p&gt;
&lt;h2&gt;Harker 图解&lt;/h2&gt;
&lt;p&gt;这个稍微复杂点，横纵坐标轴都可以任意而选择，各自有一个滑块，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/Harker.png"&gt;&lt;/p&gt;
&lt;h2&gt;QFL 和 QmFLt&lt;/h2&gt;
&lt;p&gt;这两个也特别简单，导入好对应的数据，注意项目首字母都大写，别弄错了，也就可以了，没啥可说的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ImportQFL.png"&gt;&lt;/p&gt;
&lt;p&gt;对了，如果你的原始数据没有设置分组和颜色等格式信息，记得要设置。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/QFLandQmFLt.png"&gt;&lt;/p&gt;
&lt;h2&gt;极射赤平投影和玫瑰花图&lt;/h2&gt;
&lt;p&gt;这两个功能里面有一点比较有意思的，就是可以选使用吴尔夫网或者施密特网，这两个一个是等面积网一个是等角度网，至于哪个是哪个我忘了，反正程序里面应该是对的。&lt;/p&gt;
&lt;p&gt;Line/Point 那个选框可以切换投点还是投线在图上。&lt;/p&gt;
&lt;p&gt;然后玫瑰花图功能稍微复杂点，可以设置把一个数据文件里面的所有数据当做一组来看玫瑰花图，这个场景估计常用一些；也可以按照文件中的分组各自分别来投玫瑰花图来一起对比。另外用于投玫瑰花图的项目还可以改变，也是通过滑块，Dip、Dip-Angle、Strike，就是倾向、倾角、走向，目前就放了这三个，当然实际上你也可以把别的变量放到这种变量名下然后生成玫瑰花图，灵活点呗。对了，玫瑰花图的步长是可以调整的，不懂什么是步长，你试试就知道了。&lt;/p&gt;
&lt;p&gt;另外一定要注意，数据表格里面的三个项目一定是Dip、Dip-Angle、Strike，首字母必须大写哈。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/StereoAndRose.png"&gt;&lt;/p&gt;
&lt;h2&gt;锆石 Ce4/3 比值计算氧逸度&lt;/h2&gt;
&lt;p&gt;数据挺复杂，不过按照下图所示来设置就好了。&lt;/p&gt;
&lt;p&gt;下面的图就是 Ballard 当初那篇文章中的数据。锆石里面的  Zr 一定要设置成那个值别变。Base 可以是全岩的稀土值和 Zr 值，也可以是斜长石的，这取决于你用哪个做基准。3 和 4 那些是电价，不要动！yes 表示用于计算并且投图，no 表示仅投图不用于计算，空白的表示既不计算也不投图。例如这个例子里面的 Tm 设置为空白，是因为原始数据里面全岩就没有测出来 Tm 的数据，而 La 等设置为 no 则是因为原始数据中全岩的 La 存在正异常所以从拟合曲线的过程中抛出去了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/ZriconCeCalculation.png"&gt;&lt;/p&gt;
&lt;h2&gt;锆石和金红石温度计&lt;/h2&gt;
&lt;p&gt;没啥可说的，Zr 是金红石里面的锆元素含量，Ti 是锆石里面的钛元素含量，然后ASiO2  和 ATiO2 是这两种成分的活度。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/Thermometer.png"&gt;&lt;/p&gt;
&lt;h2&gt;自定义平面图&lt;/h2&gt;
&lt;p&gt;这个功能允许用户加载任意图片做底图来投图。
不过你必须得明确理解原图的数学意义才行，要不然你都不知道坐标位置以及是否使用了对数函数，怎么可能糊涂地就拿来用，那还是科学么，那不是扯淡么。&lt;/p&gt;
&lt;p&gt;例如下面这个图的原文中都在图下方说了，使用的两种元素 Nb 和 Th，利用 N-MORB(Sun and McDonough 1989) 进行了标准化，然后投图的时候很明显是用了对数函数。所以咱们在程序中也选择这样的设置。&lt;/p&gt;
&lt;p&gt;从文中原图可以看出来，左右下上四个边界分别是 0.01/100/0.01/1000，咱们对应在直角坐标系里面就应该是 -2/2/-2/3。所以在程序里面的对应位置就输入这四个值。&lt;/p&gt;
&lt;p&gt;你要是这些都看不出来或者看不懂，就还是回家洗洗睡吧。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/UserDefinedXY.png"&gt;&lt;/p&gt;
&lt;h1&gt;捐助支持&lt;/h1&gt;
&lt;p&gt;如果你希望支持 GeoPyTool 的开发，可以扫描下面的二维码进行捐助。
&lt;img alt="" src="https://raw.githubusercontent.com/GeoPyTool/GeoPyTool/master/img/WeChatQrCode.png"&gt;&lt;/p&gt;</content><category term="Doc"></category><category term="Chinese"></category><category term="中文"></category><category term="文档"></category></entry><entry><title>Temperary API Ref of GeoPyTool</title><link href="/temperary-api-ref-of-geopytool.html" rel="alternate"></link><published>2017-03-18T16:20:00+08:00</published><updated>2017-03-18T16:20:00+08:00</updated><author><name>CycleUsyer</name></author><id>tag:None,2017-03-18:/temperary-api-ref-of-geopytool.html</id><summary type="html">&lt;h1&gt;API Ref of GeoPyTool&lt;/h1&gt;
&lt;p&gt;created on Sat Dec 17 22:28:24 2016
@author: cycleuser
Create Date: 2015-07-13
Modify Date: 2017-04-10
a tool set for daily geology related task.&lt;/p&gt;
&lt;h1&gt;prerequisite:&lt;/h1&gt;
&lt;p&gt;based on Python 3.x
   need math,numpy,pandas,matplotlib,xlrd,chempy&lt;/p&gt;
&lt;h1&gt;Simple Sample:&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;opern&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;
&lt;span class="mi"&gt;2 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;API Ref of GeoPyTool&lt;/h1&gt;
&lt;p&gt;created on Sat Dec 17 22:28:24 2016
@author: cycleuser
Create Date: 2015-07-13
Modify Date: 2017-04-10
a tool set for daily geology related task.&lt;/p&gt;
&lt;h1&gt;prerequisite:&lt;/h1&gt;
&lt;p&gt;based on Python 3.x
   need math,numpy,pandas,matplotlib,xlrd,chempy&lt;/p&gt;
&lt;h1&gt;Simple Sample:&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;opern&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;geopython&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;gp&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;TasSample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tas.xlsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;TasSample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;geopython&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Geology related classes available:&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1) Tas
2) Ree
3) Trace &amp;amp; Trace2 (with different sequence of trace elements)
4) Qfl &amp;amp; Qmflt &amp;amp; Qapf
5) Polar (projection of wulf net &amp;amp; schmidt net)
6) Harker diagram
7) CIPW Norm calculation
8) Zircon Ce4/Ce3 calculation (Ballard 2002)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;know issues:&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1) Only work on Python 3.x
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Other&lt;/h1&gt;
&lt;p&gt;Any issues or improvements please open an issue at &lt;a href="https://github.com/GeoPyTool/GeoPyTool/issues"&gt;here&lt;/a&gt;
or leave a message to &lt;a href="http://geopython.com"&gt;our website&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;DualTri&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a class of a double triangulars frame
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Label: the label at the tree corners of the triangular&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a list consist of three strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;LabelPosition: just the Position of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    LabelPosition: x-y style coords , three of them&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: description of the different region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list containing multiple strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the locations of those each one in the Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of triangular coord points&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the offset value used to adjust the appearance of each one in the Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of x-y coord offset values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;name: the file name used to read and use&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=['Q', 'A', 'P', 'F'], Label=qapf.xlsx)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Initialize self.  See help(type(self)) for accurate signature.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;h2&gt;Frame&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a Frame of TAS, REE, Trace Elements and other similar x-y plots
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Width,Height: the width and height of the generated figure&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Width,Height: two int numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dpi: dots per inch&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Dpi: an int number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Left,Right: the left and right limit of X axis&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Left,Right: two int numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Base,Top: the left and right limit of Y axis&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Base,Top: two int numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;X0,X1,X_Gap: the left and right limit of X label, and the numbers of gap between them&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X0,X1,X_Gap: three int numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Y0,Y1,Y_Gap: the left and right limit of Y label, and the numbers of gap between them&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Y0,Y1,Y_Gap: three int numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;FontSize: size of font of labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    FontSize: an int number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;xLabel, yLabel: the labels put alongside with x and y axises&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    xLabel, yLabel: two strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Width=Y Label, Height=X Label, Dpi=16, Left=7, Right=60, X_Gap=0, Base=9, Top=80, Y_Gap=0, FontSize=80, xLabel=6, yLabel=8)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Just set up all.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;Use the setup to set up figure feature.&lt;/p&gt;
&lt;h2&gt;Line&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a line class
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Begin: the Beginning point of the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Begin: a Point Instance&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;End: the End point of the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    End: a Point Instance&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Points: gathering all the Point Instances&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Points: a list&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;X,Y: the gathered x and y values of the line to use in plotting&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X,Y: two lists containing float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Width: the width of the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Width: an int number , mayby float is OK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color of the Line to draw on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Style: the style used for the Line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Style: a string; -, --,-., : maybe there would be some other types , from matplotlib&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency of the Point&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Label: label of the Line, telling what it is and distinguish it from other lines&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a string , if leave as "" or '' such kind of blank string, the label will not show on canvas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sort: the sequence used for sorting the points consisting the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Sort: a string, x means sort the points with their x values, y means use y instead of x, other means use the sequence of points as these points  are put to the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Points=, Sort=0.3, Width=-, Color=blue, Style=1, Alpha=, Label=[(0, 0), (1, 1)])&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setup the datas
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;order(self, TMP=[])&lt;/h3&gt;
&lt;h3&gt;sequence(self)&lt;/h3&gt;
&lt;p&gt;sort the points in the line with given option&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;draw the line on canvas with its setup&lt;/p&gt;
&lt;h2&gt;Point&lt;/h2&gt;
&lt;p&gt;a Point class&lt;/p&gt;
&lt;p&gt;X,Y: the values of its x-y coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X,Y: two float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Location: gather X and Y as a tuple for further use&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Location: just a tuple with two numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Size: the size of the Point to draw on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Size: a number , int or maybe float also OK , better around 1 to 20, not too large or too small&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color of the Point to draw on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency of the Point&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Marker: the marker used for the Point&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Marker: a string; o, d, *, ^ , maybe there would be some other types , from matplotlib&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Label: label of the Point, telling what it is and distinguish it from other points&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a string , if leave as "" or '' such kind of blank string, the label will not show on canvas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, X=, Y=o, Size=0.3, Color=red, Alpha=12, Marker=0, Label=0)&lt;/h3&gt;
&lt;p&gt;just set up the values&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;plot the Point to the canvas&lt;/p&gt;
&lt;h2&gt;Points&lt;/h2&gt;
&lt;p&gt;a class for multiple Points&lt;/p&gt;
&lt;p&gt;X,Y: the values of its x-y coords&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X,Y: two lists consist of float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Size: the size of the Points to draw on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Size: a number , int or maybe float also OK , better around 1 to 20, not too large or too small&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color of the Points to draw on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency of the Points&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Marker: the marker used for the Points&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Marker: a string; o, d, *, ^ , maybe there would be some other types , from matplotlib&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Label: label of the Points, telling what they are and distinguish them from other points&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a string , if leave as "" or '' such kind of blank string, the label will not show on canvas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, points=8, Size=, Color=o, Alpha=0.3, Marker=red, Label=12, FontSize=[(0, 0), (0, 1)])&lt;/h3&gt;
&lt;p&gt;just set up the values&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;plot the Point to the canvas&lt;/p&gt;
&lt;h2&gt;Polar&lt;/h2&gt;
&lt;p&gt;Polar Stereographic projection for structural data&lt;/p&gt;
&lt;p&gt;name: the file used to plot&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=['N', 'S', 'W', 'E'], Label=strike.xlsx)&lt;/h3&gt;
&lt;p&gt;Initialize self.  See help(type(self)) for accurate signature.&lt;/p&gt;
&lt;h3&gt;eqan(self, A)&lt;/h3&gt;
&lt;h3&gt;eqar(self, A)&lt;/h3&gt;
&lt;h3&gt;getangular(self, A, B, C)&lt;/h3&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;h3&gt;schmidt(self, Width=k, Color=1)&lt;/h3&gt;
&lt;p&gt;read the Excel, then draw the schmidt net and Plot points, job done~&lt;/p&gt;
&lt;h3&gt;wulf(self, Width=k, Color=1)&lt;/h3&gt;
&lt;p&gt;read the Excel, then draw the wulf net and Plot points, job done~&lt;/p&gt;
&lt;h2&gt;Qapf&lt;/h2&gt;
&lt;p&gt;inherit DualTri and Tool, read xlsx or csv file and make basic Qapf diagram&lt;/p&gt;
&lt;p&gt;Tags: the Tags on this diagram for description of different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tags: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: the labels of the different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the triangular coord location of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuples, these tuples contains the triangular coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the x-y offset of these labels on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of tuples containing x-y values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=10, Label=['Q', 'A', 'P', 'F'], FontSize=qapf.xlsx)&lt;/h3&gt;
&lt;p&gt;Initialize self.  See help(type(self)) for accurate signature.&lt;/p&gt;
&lt;h3&gt;draw(self)&lt;/h3&gt;
&lt;h3&gt;lowtri(self)&lt;/h3&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;h3&gt;uptri(self)&lt;/h3&gt;
&lt;h2&gt;QapfP&lt;/h2&gt;
&lt;p&gt;inherit Qapf, read xlsx or csv file and make Qapf diagram for Plutonic Rocks&lt;/p&gt;
&lt;p&gt;Tags: the Tags on this diagram for description of different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tags: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: the labels of the different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the triangular coord location of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuples, these tuples contains the triangular coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the x-y offset of these labels on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of tuples containing x-y values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=10, Label=['Q', 'A', 'P', 'F'], FontSize=qapf.xlsx)&lt;/h3&gt;
&lt;p&gt;Initialize self.  See help(type(self)) for accurate signature.&lt;/p&gt;
&lt;h3&gt;draw(self)&lt;/h3&gt;
&lt;h3&gt;lowtri(self)&lt;/h3&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;h3&gt;uptri(self)&lt;/h3&gt;
&lt;h2&gt;QapfV&lt;/h2&gt;
&lt;p&gt;inherit Qapf, read xlsx or csv file and make Qapf diagram for Volcanic rocks&lt;/p&gt;
&lt;p&gt;Tags: the Tags on this diagram for description of different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tags: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: the labels of the different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the triangular coord location of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuples, these tuples contains the triangular coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the x-y offset of these labels on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of tuples containing x-y values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=10, Label=['Q', 'A', 'P', 'F'], FontSize=qapf.xlsx)&lt;/h3&gt;
&lt;p&gt;Initialize self.  See help(type(self)) for accurate signature.&lt;/p&gt;
&lt;h3&gt;draw(self)&lt;/h3&gt;
&lt;h3&gt;lowtri(self)&lt;/h3&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;h3&gt;uptri(self)&lt;/h3&gt;
&lt;h2&gt;Qfl&lt;/h2&gt;
&lt;p&gt;inherit Tri and Tool, read xlsx or csv file and make QFL diagram&lt;/p&gt;
&lt;p&gt;Tags: the Tags on this diagram for description of different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tags: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: the labels of the different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the triangular coord location of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuples, these tuples contains the triangular coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the x-y offset of these labels on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of tuples containing x-y values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=['Q', 'F', 'L'], Label=qfl.xlsx)&lt;/h3&gt;
&lt;p&gt;set up the values&lt;/p&gt;
&lt;h3&gt;draw(self)&lt;/h3&gt;
&lt;p&gt;use the values to set up the general frame and lines, fill particular zone with given colors&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;just show the triangular frame on the canvas&lt;/p&gt;
&lt;h2&gt;Qmflt&lt;/h2&gt;
&lt;p&gt;inherit Qfl and Tool, read xlsx or csv file and make Qmflt diagram&lt;/p&gt;
&lt;p&gt;Tags: the Tags on this diagram for description of different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tags: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: the labels of the different units&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the triangular coord location of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuples, these tuples contains the triangular coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Offset: the x-y offset of these labels on canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Offset: a list of tuples containing x-y values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=['Qm', 'F', 'Lt'], Label=qmflt.xlsx)&lt;/h3&gt;
&lt;p&gt;set up the values&lt;/p&gt;
&lt;h3&gt;draw(self)&lt;/h3&gt;
&lt;p&gt;use the values to set up the general frame and lines, fill particular zone with given colors&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;just show the triangular frame on the canvas&lt;/p&gt;
&lt;h2&gt;Ree&lt;/h2&gt;
&lt;p&gt;inherit Frame, read xlsx or csv file and use the Rare Earth Elements to plot the ree diagram&lt;/p&gt;
&lt;p&gt;Element: the elements used in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Element: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: a ref of Element&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;WholeData: gathering all data and find the min and max of the data file to set the limits of Y&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    WholeData: a list of float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;X0,X1: the left and right limits of X&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X0,X1: two int or float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;X_Gap: the space between the left and right limits of X&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X_Gap: an int number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;name: the file name to use in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=, Width=$REE-Standardlized-Pattern$, Height=16, Dpi=5, Left=3, Right=-1, X0=6, X1=-1, X_Gap=15, Base=15, Top=1, Y0=16, Y1=0, Y_Gap=80, FontSize=6, xLabel=8, yLabel=ree.xlsx)&lt;/h3&gt;
&lt;p&gt;Just set up all.&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;set the figure basic with the settings&lt;/p&gt;
&lt;h2&gt;Tag&lt;/h2&gt;
&lt;p&gt;a class for Tag put on canvas&lt;/p&gt;
&lt;p&gt;Label: label of the Tag, telling what it is and distinguish them from other tags&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a strings , if leave as "" or '' such kind of blank string, the label will not show on canvas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Location: the location of the Tag&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Location: a tuple consist of x-y values of its coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;X_offset,Y_offset: the values of its x-y offsets on coords&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    X_offset,Y_offset: two float numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;FontSize: the size of font of the Tag&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    FontSize: a number , int or maybe float also OK , better around 8 to 12, not too large or too small&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Label=12, Location=3, X_offset=-6, Y_offset=(0, 0), FontSize=Label)&lt;/h3&gt;
&lt;p&gt;set up the values&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;show the Tag on canvas with its offsets and font size, color and alpha are fixed for now&lt;/p&gt;
&lt;h2&gt;Tas&lt;/h2&gt;
&lt;p&gt;inherit Frame, read xlsx or csv file and use SiO2 , Na2O and K2O to plot tas diagram&lt;/p&gt;
&lt;p&gt;Lines: the lines consisting the Tas frame&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Lines: a list of lines&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tags: tags used for the items of Tas diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Tagas: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: labels on the canvas&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Locations: the locations of these labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Locations: a list of tuple containing two numbers as x-y coords&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;description: the description of the tas diagram&lt;/p&gt;
&lt;p&gt;name: the file name used for tas diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=$na_2O + K_2O wt\%$, Width=$SiO_2 wt\%$, Height=12, Dpi=15, Left=15, Right=1, X0=16, X1=0, X_Gap=11, Base=77, Top=37, Y0=79, Y1=35, Y_Gap=80, FontSize=6, xLabel=8, yLabel=tas.xlsx)&lt;/h3&gt;
&lt;p&gt;just set up the basic settings&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;show the tas frame and lines of tas on canvas&lt;/p&gt;
&lt;h2&gt;Tool&lt;/h2&gt;
&lt;p&gt;a tool set for basic tasks, crosspoint calc, coord transfer and fill region with color&lt;/p&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h2&gt;Trace&lt;/h2&gt;
&lt;p&gt;inherit Frame, read xlsx or csv file and use the Trace Elements to plot the trace diagram&lt;/p&gt;
&lt;p&gt;Element: the elements used in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Element: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: a ref of Element&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;name: the file name to use in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=, Width=$Trace-Elements-Standardlized-Pattern$, Height=16, Dpi=5, Left=3, Right=-1, X0=6, X1=-1, X_Gap=15, Base=37, Top=1, Y0=16, Y1=0, Y_Gap=80, FontSize=9, xLabel=16, yLabel=trace.xlsx)&lt;/h3&gt;
&lt;p&gt;Just set up all.&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;set the figure basic with the settings&lt;/p&gt;
&lt;h2&gt;Trace2&lt;/h2&gt;
&lt;p&gt;inherit Frame, read xlsx or csv file and use the Trace Elements to plot the trace2 diagram&lt;/p&gt;
&lt;p&gt;Element: the elements used in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Element: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Labels: a ref of Element&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Labels: a list of strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;name: the file name to use in this diagram&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    name: a string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, name=, Width=$Trace-Elements-Standardlized-Pattern$, Height=16, Dpi=5, Left=3, Right=-1, X0=6, X1=-1, X_Gap=25, Base=26, Top=1, Y0=16, Y1=0, Y_Gap=80, FontSize=9, xLabel=16, yLabel=trace2.xlsx)&lt;/h3&gt;
&lt;p&gt;Just set up all.&lt;/p&gt;
&lt;h3&gt;read(self)&lt;/h3&gt;
&lt;p&gt;read the Excel, then use self.show() to show the frame, then Plot points, job done~&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;set the figure basic with the settings&lt;/p&gt;
&lt;h2&gt;Tri&lt;/h2&gt;
&lt;p&gt;a class of triangular frame&lt;/p&gt;
&lt;p&gt;Label: the label at the tree corners of the triangular&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Label: a list consist of three strings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;LabelPosition: just the Position of these Labels&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    LabelPosition: x-y style coords , three of them&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Label=['Q', 'F', 'L'])&lt;/h3&gt;
&lt;p&gt;set up the values&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;just show the triangular frame on the canvas&lt;/p&gt;
&lt;h2&gt;TriLine&lt;/h2&gt;
&lt;p&gt;inherit Line and Tool, line class for triangular coord&lt;/p&gt;
&lt;p&gt;x,y,z: the list for gathering the x,y,z values of points consisting the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: three lists&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Points=, Sort=0.3, Width=-, Color=blue, Style=1, Alpha=, Label=[(0, 0, 0), (1, 1, 1)])&lt;/h3&gt;
&lt;p&gt;setup the datas&lt;/p&gt;
&lt;h3&gt;order(self, TMP=[])&lt;/h3&gt;
&lt;h3&gt;sequence(self)&lt;/h3&gt;
&lt;p&gt;sort the points in the line with given option&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;draw the line on canvas with its setup&lt;/p&gt;
&lt;h3&gt;tritrans(self)&lt;/h3&gt;
&lt;h2&gt;TriPoint&lt;/h2&gt;
&lt;p&gt;inherit Point and Tool, a Point class for triangular coord&lt;/p&gt;
&lt;p&gt;x,y,z: the list for gathering the x,y,z values of points consisting the line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: three lists&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;sum: a value used in calc of coord transfer&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    sum: just a number, both int or float are OK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, P=, Size=o, Color=0.3, Alpha=red, Marker=12, Label=(10, 20, 70))&lt;/h3&gt;
&lt;p&gt;just set up the values&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;plot the Point to the canvas&lt;/p&gt;
&lt;h2&gt;TriTag&lt;/h2&gt;
&lt;p&gt;inherit Tag and Tool,a Tag for triangular coord&lt;/p&gt;
&lt;h3&gt;BinToTri(self, a, b)&lt;/h3&gt;
&lt;p&gt;Turn an a-b coord to an x-y-z triangular coord .&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;a,b: the numbers of the a-b coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    a,b: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding x-y-z triangular coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of x,y,z&lt;/p&gt;
&lt;h3&gt;Cross(self, A=[(0, 10), (100, 0)], B=[(0, 0), (10, 10)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return: the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :    a list consist of two numbers, the x-y of the crosspoint&lt;/p&gt;
&lt;h3&gt;Fill(self, P=0.3, Color=blue, Alpha=[(100, 0), (85, 15), (0, 3)])&lt;/h3&gt;
&lt;p&gt;Fill a region in planimetric rectangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in planimetric rectangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in planimetric rectangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriCross(self, A=[(50, 50, 0), (0, 0, 100)], B=[(100, 0, 0), (0, 50, 60)])&lt;/h3&gt;
&lt;p&gt;Return the crosspoint of two line A and B in triangular coord.&lt;/p&gt;
&lt;p&gt;A: first line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    A: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B: second line&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    B: a list consist of two tuples, beginning and end point of the line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the crosspoint of A and B&lt;/p&gt;
&lt;p&gt;teturn type :      a list consist of three numbers, the x-y-z of the triangular coord&lt;/p&gt;
&lt;h3&gt;TriFill(self, P=0.3, Color=blue, Alpha=[(100, 0, 0), (85, 15, 0), (0, 3, 97)])&lt;/h3&gt;
&lt;p&gt;Fill a region in triangular coord.&lt;/p&gt;
&lt;p&gt;P: the peak points of the region in triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    P: a list consist of at least three tuples, which are the points in triangular coord&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Color: the color used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Color: a string; b: blue, g: green, r: red, c: cyan, m: magenta, y: yellow, k: black, w: white&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alpha: the transparency used to fill the region&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    Alpha: a float number from 0 to 1, higher darker, lower more transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;TriToBin(self, x, y, z)&lt;/h3&gt;
&lt;p&gt;Turn an x-y-z triangular coord to an a-b coord.&lt;/p&gt;
&lt;p&gt;if z is negative, calc with its abs then return (a, -b).&lt;/p&gt;
&lt;p&gt;x,y,z: the three numbers of the triangular coord&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;type:    x,y,z: float or double are both OK, just numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;return:  the corresponding a-b coord&lt;/p&gt;
&lt;p&gt;teturn type :      a tuple consist of a and b&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;init&lt;/strong&gt;(self, Label=12, Location=3, X_offset=-6, Y_offset=(0, 1, 2), FontSize=Label)&lt;/h3&gt;
&lt;p&gt;set up the values, transfer x,y,z coords to x-y coords&lt;/p&gt;
&lt;h3&gt;show(self)&lt;/h3&gt;
&lt;p&gt;show the Tag on canvas with its offsets and font size, color and alpha are fixed for now&lt;/p&gt;</content></entry></feed>